class CalamityBlade : BrutalWeapon
{
	//Zscript conversion by agent_ash
	int heatwaveCharge;

	Default
	{
		Tag "$BDPCALAMITY";
		Inventory.PickupMessage "You got the calamity blade!  Hot damn!";
		Weapon.SlotNumber 7;
		Weapon.AmmoType "AmmoCell";
		Weapon.AmmoGive 100;
		//weapon.ammotype2 "Nuke";
		weapon.ammogive2 1;
		Inventory.PickupSound "DoomRR/heatwave/select";
		BrutalWeapon.weight 3;
		Weapon.SelectionOrder 2850;
		brutalweapon.showicon 1;
	}

	action void A_FireIncinerator()
	{
		A_StartSound("DoomRR/heatwave/fire", CHAN_WEAPON);
		A_GunFlash("FlashEnd");

		double angle = 5;
		switch (invoker.heatwaveCharge)
		{
		case 2:
			angle = 12.5;
			break;
		case 3:
			angle = 20;
			break;
		case 4:
			angle = 27.5;
			break;
		case 5:
			angle = 35;
			break;
		}

		// In Legacy of Rust vertical autoaim is completely disabled for Heatwave,
		// presumably to prevent situations where a part of the "wave" is autoaimed
		// and a part isn't (supposedly ugly?)
		// Here instead we calculate the autoaim-affected slope with BulletSlope()
		// and then just unconditinally apply it to all projectiles, so if they
		// do get autoaimed, they'll be autoaimed together:
		double projPitch = BulletSlope();
		for (double ang = -angle; ang <= angle; ang += 5.0)
		{
			// Since autoaim is handled manually, we'll need FPF_NOAUTOAIM:
			A_FireProjectile("HeatWaveRipper", ang, useammo: false, flags: FPF_NOAUTOAIM, pitch: DeltaAngle(pitch, projPitch));
		}

		invoker.heatwaveCharge = 0;
		A_ClearRefire();
	}

	States {
	Spawn:
		CBLD A -1;
		stop;
		
	GrenadeThrowFlash:
	HETS BCDE 1;
	TNT1 A 24;
	HETS EDCB 1;//32 in total
	stop;
	
	KickingFlash:
	HETK BCDEFFFFFFFFEDCB 1;
	Goto Ready;
	AirKickingFlash:
	    HETK BCDEFFFFFFFFFFEDCB 1; //18
	    Goto Ready;
	
	 SlideKickingStart:
	    HETK BCDEF 1;
	    HETK FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 1 { //39 total
			if (CountInv("Kicking") == 0) {
				return resolvestate("SlideKickingEnd");
			}
			return resolvestate(null);
		}
		Goto Ready;

	 SlideKickingEnd:
	    HETK FFFFFFEDCB 1; //10
	    Goto Ready;
	
	FuckYouFlash:
	    HETK BCDEFFFFFFFFFFFFFFFFFFFFFFEDCB 1; //18
	    stop;
	Ready:
	Ready3:
		HETG A 1 
		{
			invoker.heatwaveCharge = 0;
			Return A_WeaponReadyDX();
		}
		loop;
	SprintOverlay:
			HETK ABCD 1;
			KeepSprinting:
			HETK E 1 A_weaponreadyDX(WRF_ALLOWRELOAD,FALSE,FALSE);
			"####" A 0 A_keepsprinting();
			Goto ReturnFromSprint;
			

	
		ReturnfromSprint:
			HETK DCBA 1 A_weaponreadyDX(WRF_ALLOWRELOAD,FALSE,FALSE);
			Goto ready;
		
	Deselect: "####" A 0 A_TakeInventory("IsPlayingDoxMod",1);
	//"####" A 0 A_ClearOverlays(-2,-2);
		BFGN A 0 A_TakeInventory("TossGrenade", 1);
		HETS ABCDE 1;
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_Lower();
		Loop;
	Select:
		TNT1 A 0;
		TNT1 A 0 A_SetCrosshairDX("BLADRet", 1000,1.0);
		Goto SelectFirstPersonLegs;
		SelectContinue: "####" A 0 A_GiveInventory("IsPlayingDoxMod",1)  ;
		
		TNT1 A 1 A_instaRaise();
		BFGN A 0 A_Giveinventory("BFGSelected",1);
		BFGN A 0 A_JumpIfInventory("GoFatality", 1, "Steady");
		returnfromnothing:
        BFGN A 0 A_startSound("DoomRR/heatwave/select");
		SelectAnimation:
		HETS EDCBA 1 A_WeaponReady(WRF_NOFIRE);
		Goto Ready;
	Fire:
		TNT1 A 0 A_CheckIfAmmo("AmmoCell",10);
		TNT1 A 0
		{
			A_TakeAmmo("AmmoCell",10);
			
			invoker.heatwaveCharge++;
			//A_GunFlash();
			A_StartSound("DoomRR/heatwave/charge", 6);
			
		}
		HETC ABCDABCDABCDABCDABCDABCD 1 
		{
			A_WeaponOffset( random(1,-1) , 32+random(1,-1), 0);
			invoker.A_Gunlight(300,2,255,237,162);
		}
		TNT1 A 0 
		{
			
			A_ReFire("fire2");
		}
		Goto FireTime;
	Fire2:
		TNT1 A 0 A_CheckIfAmmo("AmmoCell",10,"FireTime");
		TNT1 A 0
		{
			A_TakeAmmo("AmmoCell",10);
			//A_Gunlight(400,25,255,237,162);
				invoker.heatwaveCharge++;
				//A_GunFlash();
				A_StartSound("DoomRR/heatwave/charge", 6);
			
		}
		HETC EFGHEFGHEFGHEFGHEFGHEFGH 1 
		{
			A_WeaponOffset( random(1,-1) , 32+random(1,-1), 0);
			invoker.A_Gunlight(400,2,255,237,162);
			If(invoker.owner.player.cmd.buttons & BT_ATTACK)
			{
				return resolvestate(null);
			}
			else
			{
				return resolvestate("firetime");
			}
		}
		TNT1 A 0 
		{
			
				A_ReFire("fire3");
			
		}
		Goto FireTime;
	Fire3:
		TNT1 A 0 A_CheckIfAmmo("AmmoCell",10,"FireTime");
		TNT1 A 0
		{
			A_TakeAmmo("AmmoCell",10);
			//A_Gunlight(500,25,255,237,162);
				invoker.heatwaveCharge++;
				//A_GunFlash();
				A_StartSound("DoomRR/heatwave/charge", 6);
			
		}
		HETC IJKLIJKLIJKLIJKLIJKLIJKL 1 
		{
			A_WeaponOffset( random(1,-1) , 32+random(1,-1), 0);
			invoker.A_Gunlight(500,2,255,237,162);
			If(invoker.owner.player.cmd.buttons & BT_ATTACK)
			{
				return resolvestate(null);
			}
			else
			{
				return resolvestate("firetime");
			}
		}
		TNT1 A 0 
		{
			
				A_ReFire("fire4");
			
		}
		Goto FireTime;
	Fire4:
		TNT1 A 0 A_CheckIfAmmo("AmmoCell",10,"FireTime");
		TNT1 A 0
		{
			A_TakeAmmo("AmmoCell",10);
			//A_Gunlight(600,25,255,237,162);
				invoker.heatwaveCharge++;
				//A_GunFlash();
				A_StartSound("DoomRR/heatwave/charge", 6);
			
		}
		HETC MNOPMNOPMNOPMNOPMNOPMNOP 1 
		{
			A_WeaponOffset( random(1,-1) , 32+random(1,-1), 0);
			invoker.A_Gunlight(600,2,255,237,162);
			If(invoker.owner.player.cmd.buttons & BT_ATTACK)
			{
				return resolvestate(null);
			}
			else
			{
				return resolvestate("firetime");
			}
		}
		TNT1 A 0 
		{
			
				A_ReFire("fire5");
			
		}
		Goto FireTime;
	Fire5:
		TNT1 A 0 A_CheckIfAmmo("AmmoCell",10,"FireTime");
		TNT1 A 0
		{
			A_TakeAmmo("AmmoCell",10);
			//A_Gunlight(700,25,255,237,162);
				invoker.heatwaveCharge++;
				//A_GunFlash();
				A_StartSound("DoomRR/heatwave/charge", 6);
			
		}
		HETC QRSTQRSTQRSTQRSTQRSTQRST 1
		{
			A_WeaponOffset( random(1,-1) , 32+random(1,-1), 0);
			invoker.A_Gunlight(700,2,255,237,162);
			If(invoker.owner.player.cmd.buttons & BT_ATTACK)
			{
				return resolvestate(null);
			}
			else
			{
				return resolvestate("firetime");
			}
		}
		Goto FireTime;
		FireTime:
		TNT1 A 0 A_FireIncinerator();
		TNT1 AAAAA 0 BRIGHT A_FireCustomMissile("ShotgunParticles", random(-12,12), 0, -1, 0, 0, random(-9,9));
		TNT1 AA 0 BRIGHT A_FireCustomMissile("ShotgunParticles2", random(-12,12), 0, -1, 0, 0, random(-9,9));
		HETF A 2 
		{
			A_ZoomFactor(0.98);
			A_SetPitch(Pitch-8, SPF_INTERPOLATE);
			A_Gunlight(700,4,255,237,162);
		}
		HETF B 2
		{
			A_ZoomFactor(1.0);
		}
		HETF CDEF 1;
		BFGN A 0 A_startSound("DoomRR/heatwave/ready");
		HETG HHHHGFEDCB 1
		{
			A_SetPitch(Pitch+0.8, SPF_INTERPOLATE);
		}
		Goto Ready;
		
		NoAmmo:
		HETG A 1;
		HETG A 2 A_startSound("weapons/empty", 1);
		Goto Ready3;
		
	//	DualWield:
		TNT1 A 0 A_takeinventory("StartDualWield",1);
		TNT1 A 0
		{
			If(findinventory("nuke"))
			{
				A_fireprojectile("placednuke",0,0,0,-10);
				takeinventory("nuke",1);
				A_startSound("skeleton/swing");
			}
			else
			{
				A_print("You don't have a nuke cell!");
			}
		}
		HETG A 10;
		Goto ready;
	
	}
}

class HeatWaveRipper : Actor
{
	static const color partColors[] =
	{
		"af4300",
		"d75f0b",
		"eb6f0f",
		"ff8f3b"
	};

	Default
	{
		Tag "Heatwave Ripper";
		Projectile;
		Damage 10;
		Speed 20;
		Radius 16;
		Height 8;
		+RIPPER
		-NOBOSSRIP;
		+BRIGHT
		+forcexybillboard;
		RenderStyle 'Add';
		Deathsound "DoomRR/heatwave/explode";
		damagetype "Desintegrate";
	}

	States {
	Spawn:
		TNT1 A 0 NoDelay A_FaceMovementDirection;
		HETB AABBCC 1
		{
			FSpawnParticleParams p;
			p.lifetime = 11;
			p.size = 18;
			p.sizestep = -p.size / p.lifetime;
			p.style = STYLE_Add;
			p.flags = SPF_FULLBRIGHT;
			p.startalpha = alpha;
			p.fadestep = -1;
			p.pos.z = pos.z;
			double hofs = -15;
			double step = (abs(hofs)*2) / 4;
			for (double d = hofs; d <= -hofs; d += step)
			{
				p.color1 = partColors[ random[incin](0, partColors.Size()-1) ];
				Vector2 ofs = Actor.RotateVector((0, d), angle);
				p.pos.xy = level.Vec2Offset(pos.xy, ofs);
				level.SpawnParticle(p);
			}
		}
		loop;
	Death:
		TNT1 A 0
		{
			FSpawnParticleParams p;
			p.lifetime = frandom[incin](25, 35);
			p.size = 18;
			p.sizestep = -p.size / p.lifetime;
			p.style = STYLE_Add;
			p.flags = SPF_FULLBRIGHT;
			p.startalpha = alpha;
			p.fadestep = -1;
			p.pos.z = pos.z;
			double hofs = -15;
			double step = (abs(hofs)*2) / 4;
			for (double d = hofs; d <= -hofs; d += step)
			{
				p.color1 = partColors[ random[incin](0, partColors.Size()-1) ];
				Vector2 ofs = Actor.RotateVector((0, d), angle);
				p.pos.xy = level.Vec2Offset(pos.xy, ofs);
				for (int i = 0; i < 2; i++)
				{
					p.vel = (0, 0, frandom[incin](2.5, 4.5)) * randompick[incin](-1, 1);
					p.accel.z = (-p.vel.z / p.lifetime);
					level.SpawnParticle(p);
				}
			}
		}
		HETB DEFGHI 3;
		stop;
	}
}

Class Placednuke : actor
{
	Default
	{
		Projectile;
		-nogravity;
		Speed 20;
	}
	States
	{
		Spawn:
			TNT1 A 0 NODELAY A_startSound ("10KIDLE",11);
			NKLG EFGEFG 2 A_spawnitemex("greenflaresmall",0,0,8);
			LOOP;
		
		Death:
			TNT1 A 0 A_spawnitemex("nuke");
			STOP;
		
	
	}
		

}

Class Nuke : Ammo
{
	Default
	{
		Inventory.PickupMessage "Picked up a Nuke Cell.";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Ammo.BackpackAmount 0;
		Ammo.BackpackMaxAmount 1;
		Inventory.Icon "NKLGH0";
		Inventory.PickupSound "10kselec";
		//Scale 1.2
	}
	States
	{
	Spawn:
		NULL A 0;
		
		Stay:
		TNT1 A 0 A_startSound ("NUKEWARN",12);
		TNT1 A 0 A_startSound ("10KIDLE",11);
		NKLG EFGEFG 2 A_spawnitemex("greenflaresmall",0,0,8);
		TNT1 A 0 A_startSound ("10KIDLE",11);
		NKLG EFGEFG 2 A_spawnitemex("greenflaresmall",0,0,8);
		TNT1 A 0 A_startSound ("NUKEWARN",12);
		TNT1 A 0 A_startSound ("10KIDLE",11);
		NKLG EFGEFG 2 A_spawnitemex("greenflaresmall",0,0,8);
		TNT1 A 0 A_startSound ("10KIDLE",11);
		NKLG EFGEFG 2 A_spawnitemex("greenflaresmall",0,0,8);
		TNT1 A 0 A_startSound ("NUKEWARN",12);
		TNT1 A 0 A_startSound ("10KIDLE",11);
		NKLG EFGEFG 2 A_spawnitemex("greenflaresmall",0,0,8);
		TNT1 A 0 A_startSound ("10KIDLE",11);
		NKLG EFGEFG 2 A_spawnitemex("greenflaresmall",0,0,8);
		TNT1 A 0 A_startSound ("NUKEWARN",12);
		TNT1 A 0 A_startSound ("10KIDLE",11);
		NKLG EFGEFG 2 A_spawnitemex("greenflaresmall",0,0,8);
		TNT1 A 0 A_startSound ("10KIDLE",11);
		NKLG EFGEFG 2 A_spawnitemex("greenflaresmall",0,0,8);
		TNT1 A 0 A_startSound ("NUKEWARN",12);
		TNT1 A 0 A_startSound ("10KIDLE",11);
		NKLG EFGEFG 2 A_spawnitemex("greenflaresmall",0,0,8);
		TNT1 A 0 A_startSound ("10KIDLE",11);
		NKLG EFGEFG 2 A_spawnitemex("greenflaresmall",0,0,8);
		TNT1 A 0 A_startSound ("NUKEWARN",12);
		TNT1 A 0 A_startSound ("10KIDLE",11);
		NKLG EFGEFG 2 A_spawnitemex("greenflaresmall",0,0,8);
		TNT1 A 0 A_startSound ("10KIDLE",11);
		NKLG EFGEFG 2 A_spawnitemex("greenflaresmall",0,0,8);
		
		TNT1 A 0
		{
			bnointeraction = true;
			A_changelinkflags(true);
		}
		TNT1 A 1 A_Explode(400, 2000, 1, 1, 2000,0,0,"bulletpuff","fire");
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_CustomMissile ("NuclearFlamesImpact", 5, 0, random (0, 360), 2, random (0, 10));
	//	TNT1 A 0 A_CustomMissile ("SpawnedExplosionNuke2", 30, 0, random (0, 360), 2, random(80, 90))
		//TNT1 AAA 0 A_CustomMissile ("lONGExplosionSpawner", 30, 0, random (0, 360), 2, 90)
		//TNT1 AAA 0  A_SpawnItemEx("SpawnedExplosionNuke", random (-400, 400), random (-400, 400), random (0, 100))
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0  A_SpawnItemEx("SpawnedExplosionNuke", random (-600, 600), random (-600, 600), random (0, 50));
		EXPL A 0 Radius_Quake (9, 200, 0, 300, 0);
		TNT1 AAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("NukeFlare", random (-800, 800), random (-800, 800), random (0, 100));
		TNT1 AAAA 2 A_SpawnItemEx("NukeFlare", random (-800, 800), random (-800, 800), random (0, 100));
		//TNT1 A 0 A_Explode(100, 5000, 1, 1, 4000)
		TNT1 A 0 A_spawnitemex("nukedamage");
		TNT1 A 0 A_StartSound("NUKEEXP", 1);
		//TNT1 A 0 A_Explode(4000,800, 1, 1, 1)
		TNT1 A 4 A_SpawnItemEx("NukeFlare", 0, 0, 300);
		TNT1 A 4 A_SpawnItemEx("NukeFlare", 0, 0, 450);
		TNT1 A 4 A_SpawnItemEx("NukeFlare", 0, 0, 600);
		TNT1 A 4 A_SpawnItemEx("NukeFlare", 0, 0, 750);
		TNT1 A 4 A_SpawnItemEx("NukeFlare", 0, 0, 900);
		TNT1 A 4 A_SpawnItemEx("NukeFlare", 0, 0, 1100);
		TNT1 A 4 A_SpawnItemEx("NukeFlare", 0, 0, 1200);
		TNT1 A 4 A_SpawnItemEx("NukeFlare", 0, 0, 1300);
		TNT1 A 4 A_SpawnItemEx("NukeFlare", 0, 0, 1400);
		TNT1 A 4 A_SpawnItemEx("NukeFlare", 0, 0, 1500);
		TNT1 AAAAA 4 A_SpawnItemEx("NukeFlare", 0, 0, 1600);
		EXPL A 0 Radius_Quake(6, 200, 0, 300, 0);
		TNT1 A 60;
		TNT1 AAAAAAAAAAAAA 0  A_CustomMissile ("NukeSmoke", random (50, 1200), 0, random (0, 360), 2, random(80, 90));
		TNT1 AAA 0  A_CustomMissile ("NukeSmokeBig", 1400, 0, random (0, 360), 2, random(80, 90));
		TNT1 A 1000;
		sTOP;

	}
}