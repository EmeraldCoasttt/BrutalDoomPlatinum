	
	class BDPNotMonster : Actor
	{
	
	}
	
	Class BDPSecret : Actor
	{
		States
		{
			Spawn:
			CACO A -1;
			Wait;
		}
	}
	
	class BDPSecretSpawner : Actor
	{
		bool dud;
		bool chanceinit;
		


		static void SpawnSecrets()
		{
			// find all secret sectors, find potential spawn spots within them
		int potentialsecrets = (1 + level.total_secrets * 0.333);
		//console.printf("%d",potentialsecrets);
		
		int tboxes = 0;
		for ( int i=0; i<level.Sectors.Size(); i++ )
		{
			if ( !(level.Sectors[i].flags&Sector.SECF_SECRET) ) continue;
			Sector s = level.Sectors[i];
			// find any spots in the sector that are within it and have no linedefs or blocking actors within a 32 unit box
			// start from the center, expand in rings
			Vector2 origin = s.centerspot;
			double maxradius = 0;
			for ( int j=0; j<s.lines.Size(); j++ )
			{
				Line l = s.lines[j];
				double v1len = (l.v1.p-origin).length(),
					v2len = (l.v2.p-origin).length();
				if ( v1len > maxradius ) maxradius = v1len;
				if ( v2len > maxradius ) maxradius = v2len;
			}
			int rings = 1;
			bool spawned = false;
			Array<bdpspawnspot> spots;
			spots.Clear();
			for ( double j=0.; j<maxradius; j+=16. )
			{
				for ( double k=0.; k<360.; k+=(360./rings) )
				{
					// check spot
					Vector3 testpos = (origin.x+j*cos(k),origin.y+j*sin(k),0);
					testpos.z = s.floorplane.ZAtPoint(testpos.xy);
					if ( (level.PointInSector(testpos.xy) != s) || !level.IsPointInLevel(testpos) ) continue;
					double ceil = s.ceilingplane.ZAtPoint(testpos.xy);
					bool blocked = false;
					BlockLinesIterator bl = BlockLinesIterator.CreateFromPos(testpos,16,16,s);
					double tbox[4];
					// top, bottom, left, right
					tbox[0] = testpos.y+16;
					tbox[1] = testpos.y-16;
					tbox[2] = testpos.x-16;
					tbox[3] = testpos.x+16;
					while ( bl.Next() )
					{
						Line l = bl.CurLine;
						if ( !l ) continue;
						if ( tbox[2] > l.bbox[3] ) continue;
						if ( tbox[3] < l.bbox[2] ) continue;
						if ( tbox[0] < l.bbox[1] ) continue;
						if ( tbox[1] > l.bbox[0] ) continue;
						if ( BDPHandler.BoxOnLineSide(tbox[0],tbox[1],tbox[2],tbox[3],l) != -1 ) continue;
						blocked = true;
						break;
					}
					if ( blocked ) continue;
					// check for 3D floors first
					int nffloor = s.Get3DFloorCount();
					double bceil = ceil;
					for ( int l=0; l<nffloor; l++ )
					{
						if ( !(s.Get3DFloor(l).flags&F3DFloor.FF_SOLID) ) continue;
						double fz = s.Get3DFloor(l).top.ZAtPoint(testpos.xy);
						if ( fz < testpos.z ) continue;
						double cz = ceil;
						for ( int l2=0; l2<nffloor; l2++ )
						{
							if ( !(s.Get3DFloor(l2).flags&F3DFloor.FF_SOLID) ) continue;
							if ( (s.Get3DFloor(l2).top.ZAtPoint(testpos.xy) < fz) ) continue;
							cz = s.Get3DFloor(l2).bottom.ZAtPoint(testpos.xy);
							break;
						}
						if ( cz < bceil ) bceil = cz;
						if ( cz-fz < 60 ) continue;	// too short
						//check for actors
						/*
						bool blockedff = false;
						BlockThingsIterator bt = BlockThingsIterator.CreateFromPos(testpos.x,testpos.y,fz,60,256,false);
						while ( bt.Next() )
						{
							if ( !bt.Thing ) continue;
							if ( abs(bt.Thing.pos.x-testpos.x) > 4+bt.Thing.Radius ) continue;
							if ( abs(bt.Thing.pos.y-testpos.y) > 4+bt.Thing.Radius ) continue;
							blockedff = true;
							break;
						}
						if ( blockedff ) continue;
						*/
						let sp = new("bdpspawnspot");
						sp.pos = (testpos.x,testpos.y,fz);
						sp.angle = k+180;
						spots.Push(sp);
					}
					// spawn at the real floor
					if ( bceil-testpos.z < 8 ) continue;	// too short
					// don't spawn on sky or hurtfloors if there are 3D floors
					if ( (nffloor > 0) && ((s.GetTexture(0) == skyflatnum) || (s.damageamount > 0)) ) continue;
					/*
					BlockThingsIterator bt = BlockThingsIterator.CreateFromPos(testpos.x,testpos.y,testpos.z,60,256,false);
					while ( bt.Next() )
					{
						if ( !bt.Thing ) continue;
						if ( abs(bt.Thing.pos.x-testpos.x) > 32+bt.Thing.Radius ) continue;
						if ( abs(bt.Thing.pos.y-testpos.y) > 32+bt.Thing.Radius ) continue;
						blocked = true;
						break;
					}
					*/
					//if ( blocked ) continue;
					let sp = new("bdpspawnspot");
					sp.pos = testpos;
					sp.angle = k+180;
					spots.Push(sp);
				}
				rings += 3;
			}
			if ( spots.Size() < 10 ) continue;
			int ws = Random[bdpspawnspot](0,spots.Size()-1);
			let handler = WeaponSpawnHandler(StaticEventHandler.Find('WeaponSpawnHandler'));

			Handler.SpawnSecret(spots[ws].pos);
			//console.printf("buttsex");
			//c.angle = spots[ws].angle;
			tboxes++;
			if ( tboxes >= potentialsecrets ) break;
		}
		}
	}
	
	Class bdpspawnspot
	{
		Vector3 pos;
		double angle;
	}
	
	class BDPHandler : EventHandler
	{
	
	bool mercilessgranted;
	
	override void NetworkProcess(ConsoleEvent e)
	{
		PlayerInfo src = players[e.Player];
		if(!src || !src.mo) return;
		let bdplr = Brutal_Playerbase(src.mo);
		
		if(e.Name ~== "togglescanner" && bdplr)
		{
			bdplr.togglescanner();
		}
	}
	/*
	override bool InputProcess(InputEvent e)
    {

		let bdplr = Brutal_Playerbase(src.mo);
        if (bindings.GetBinding(e.KeyScan) ~== "+use" && bdplr && bdplr.ultranightmare && bdpplr.health <= 0)
        {
            Console.Printf("Pressed Use while dead");
            return true;
        }
		Else
		{
			return false;
		}
    }
	*/
	static clearscope bool IsAABBColliding(Actor mo1, Actor mo2)
	{	
		Vector2 diff = level.Vec2Diff(mo1.pos.xy + mo1.vel.xy, mo2.pos.xy + mo2.vel.xy);		
		if (abs(diff.x) > (mo1.radius + mo2.radius) ||
			abs(diff.y) > (mo1.radius + mo2.radius) ||
			(mo2.pos.z  > mo1.pos.z + mo1.height) ||
			(mo2.pos.z + mo2.height < mo1.pos.z)
			)
		{
			return false;
		}
		return true;
	}
	
	// Checks if given actor is a voodoo doll player:
	static clearscope bool IsVoodooDoll(Actor p)
	{
		return !p.player || p.player.mo != p;
	}
	
	static clearscope int PointOnLineSide( Vector2 p, Line l )
	{
		if ( !l ) return 0;
		return (((p.y-l.v1.p.y)*l.delta.x+(l.v1.p.x-p.x)*l.delta.y) > double.epsilon);
	}
	
	static clearscope int BoxOnLineSide( double top, double bottom, double left, double right, Line l )
	{
		if ( !l ) return 0;
		int p1, p2;
		if ( l.delta.x == 0 )
		{
			// ST_VERTICAL:
			p1 = (right < l.v1.p.x);
			p2 = (left < l.v1.p.x);
			if ( l.delta.y < 0 )
			{
				p1 ^= 1;
				p2 ^= 1;
			}
		}
		else if ( l.delta.y == 0 )
		{
			// ST_HORIZONTAL:
			p1 = (top > l.v1.p.y);
			p2 = (bottom > l.v1.p.y);
			if ( l.delta.x < 0 )
			{
				p1 ^= 1;
				p2 ^= 1;
			}
		}
		else if ( (l.delta.x*l.delta.y) >= 0 )
		{
			// ST_POSITIVE:
			p1 = PointOnLineSide((left,top),l);
			p2 = PointOnLineSide((right,bottom),l);
		}
		else
		{
			// ST_NEGATIVE:
			p1 = PointOnLineSide((right,top),l);
			p2 = PointOnLineSide((left,bottom),l);
		}
		return (p1==p2)?p1:-1;
	}
	override void WorldLoaded( WorldEvent e )
	{
		If(level.getchecksum() != '3c9902e376cca1e9c3be8763bdc21df5')
		{
			BDPSecretSpawner.SpawnSecrets();
		}
		mercilessgranted = false;
	
	}
	
	
	override void CheckReplacement(ReplaceEvent e)
	{
	If(bd_disabledecorations == FALSE)
		{
		
		if (e.Replacee == "RedTorch") 
			{
			E.replacement = "TallTorch_Red";
			}
		if (e.Replacee == "GreenTorch") 
			{
			E.replacement = "TallTorch_Green";
			}
		if (e.Replacee == "BlueTorch") 
			{
			E.replacement = "TallTorch_Blue";
			}
		if (e.Replacee == "ShortRedTorch") 
			{
			E.replacement = "ShortTorch_Red";
			}
		if (e.Replacee == "ShortGreenTorch") 
			{
			E.replacement = "ShortTorch_Green";
			}
		if (e.Replacee == "ShortBlueTorch") 
			{
			E.replacement = "ShortTorch_Blue";
			}
		if (e.Replacee == "Candelabra") 
			{
			E.replacement = "Candelabra1";
			}
		if (e.Replacee == "Candlestick") 
			{
			E.replacement = "Candlestick1";
			}
		if (e.Replacee == "BurningBarrel") 
			{
			E.replacement = "BurningBarrel1";
			}
		if (e.Replacee == "TechLamp") 
			{
			E.replacement = "TechLamp1";
			}
		if (e.Replacee == "TechLamp2") 
			{
			E.replacement = "TechLamp21";
			}
		if (e.Replacee == "Column") 
			{
			E.replacement = "Column1";
			}
		if (e.Replacee == "HeadsOnAStick") 
			{
			E.replacement = "ImpaledSkulls";
			}
		if (e.Replacee == "HeadOnAStick") 
			{
			E.replacement = "ImpaledHead";
			}
		if (e.Replacee == "TallGreenColumn") 
			{
			E.replacement = "BDTallGreenColumn";
			}
		if (e.Replacee == "ShortGreenColumn") 
			{
			E.replacement = "BDShortGreenColumn";
			}
		if (e.Replacee == "TallRedColumn") 
			{
			E.replacement = "BDTallRedColumn";
			}
		if (e.Replacee == "ShortRedColumn") 
			{
			E.replacement = "BDShortRedColumn";
			}
		if (e.Replacee == "SkullColumn") 
			{
			E.replacement = "BDSkullColumn";
			}
		if (e.Replacee == "HeartColumn") 
			{
			E.replacement = "BDHeartColumn";
			}
		if (e.Replacee == "TorchTree") 
			{
			E.replacement = "TorchTree2";
			}
		if (e.Replacee == "BigTree") 
			{
			E.replacement = "Big_tree";
			}
		if (e.Replacee == "Stalagtite") 
			{
			E.replacement = "StalagtiteReplacer";
			}
		if (e.Replacee == "Stalagmite") 
			{
			E.replacement = "StalagmiteReplacer";
			}
		if (e.Replacee == "EvilEye") 
			{
			E.replacement = "EvilEyeReplacer";
			}
		if (e.Replacee == "DeadMarine") 
			{
			E.replacement = "VeryDeadMarine";
			}
		if (e.Replacee == "GibbedMarine") 
			{
			E.replacement = "VeryVeryDeadMarine";
			}
		if (e.Replacee == "GibbedMarineExtra") 
			{
			E.replacement = "VeryVeryDeadMarine2";
			}
		if (e.Replacee == "DeadStick") 
			{
			E.replacement = "DeadDeadStick";
			}
		if (e.Replacee == "LiveStick") 
			{
			E.replacement = "LiveStickSpawner";
			}
		if (e.Replacee == "BloodyTwitch") 
			{
			E.replacement = "BloodyTwitchSpawner";
			}
		if (e.Replacee == "Meat2") 
			{
			E.replacement = "hangingbodySpawner";
			}
		if (e.Replacee == "meat4") 
			{
			E.replacement = "hangingPairOfLegsSpawner";
			}
		if (e.Replacee == "Nonsolidmeat2") 
			{
			E.replacement = "NSHangingBody";
			}
		if (e.Replacee == "NonSolidMeat4") 
			{
			E.replacement = "NSHangingPairOflegs";
			}
		if (e.Replacee == "Meat3") 
			{
			E.replacement = "hangingDeadGuyNoLegSpawner";
			}
		if (e.Replacee == "Meat5") 
			{
			E.replacement = "hangingLeg";
			}
		if (e.Replacee == "NonSolidMeat3") 
			{
			E.replacement = "NSHangingDeadGuyNoLeg";
			}
		if (e.Replacee == "Nonsolidmeat5") 
			{
			E.replacement = "NSHangingLeg";
			}
		if (e.Replacee == "NonSolidTwitch") 
			{
			E.replacement = "DeadNonSolidTwitch";
			}
		if (e.Replacee == "hangNoGuts") 
			{
			E.replacement = "DeadHangNoGuts";
			}
		if (e.Replacee == "HangBNoBrain") 
			{
			E.replacement = "DeadHangBNoBrain";
			}
		if (e.Replacee == "HangTLookingDown") 
			{
			E.replacement = "DeadHangTLookingDown";
			}
		if (e.Replacee == "HangTLookingUp") 
			{
			E.replacement = "DeadHangTLookingUp";
			}
		if (e.Replacee == "HangTSkull") 
			{
			E.replacement = "DeadHangTSkull";
			}
		if (e.Replacee == "HangTNoBrain") 
			{
			E.replacement = "DeadHangTNoBrain";
			}
		if (e.Replacee == "ColonGibs") 
			{
			E.replacement = "ColonGibs2";
			}
		if (e.Replacee == "SmallBloodPool") 
			{
			E.replacement = "SmallBloodPool2";
			}
		if (e.Replacee == "BrainStem") 
			{
			E.replacement = "BrainStem2";
			}
		if (e.Replacee == "Gibs") 
			{
			E.replacement = "Gibs2";
			}
		if (e.Replacee == "DeadCacodemon") 
			{
			E.replacement = "DeadCacodemonSpawner";
			}
		if (e.Replacee == "DeadDemon") 
			{
			E.replacement = "DeadDemonSpawner";
			}
		if (e.Replacee == "DeadZombieman") 
			{
			E.replacement = "DeadZombiemanSpawner";
			}
		if (e.Replacee == "DeadDoomImp") 
			{
			E.replacement = "DeadImpSpawner";
			}
		if (e.Replacee == "DeadShotgunGuy") 
			{
			E.replacement = "DeadShotgunGuySpawner";
			}
		
		}
		
		if(e.replacee == Checkpotentialactor('HeavyMachineGun'))
		{
			e.Replacement = "BDPTurret";
		}
		
		if(e.replacee == Checkpotentialactor('attackhelicopter'))
		{
			e.Replacement = "BDPChopper";
		}
		
		if(e.replacee == Checkpotentialactor('deh_actor_199'))
		{
			e.Replacement = "BDECChairModern";
		}
		
		if(e.replacee == Checkpotentialactor('deh_actor_151'))
		{
			e.Replacement = "BDPBanshee";
		}
		if(e.replacee == Checkpotentialactor('hellishmissilelauncher'))
		{
			e.Replacement = "deadrevenantlauncher";
		}
		if(e.replacee == Checkpotentialactor('labguy'))
		{
			e.Replacement = "zombieguy";
		}
		if(e.replacee == Checkpotentialactor('BDmummy'))
		{
			e.Replacement = "zombieguy";
		}

	}
	
	
	//GZ doesn't like it if we try to replace an actor that doesn't exist
	
	String Checkpotentialactor(String inputname)
	{
		class<actor> potentialactor = inputname;
		If(potentialactor)
		{
			Return inputname;
		}
		Else
		{
			return 'null';
		}
	
	}
	
	override void worldthingspawned(Worldevent e)
	{
		If(e.thing && e.thing.bismonster && !e.thing.findinventory("monsterinventory"))
			{
			e.thing.giveinventory("monsterinventory",1);
			e.thing.bdoshadowblock = true;
			}
		if(e.thing && level.mapname != 'TITLEMAP' && !e.thing.findinventory("nottitlemap") && e.thing is "playerpawn")
			{
			e.thing.giveinventory("nottitlemap",1);
			}
	}
	
	
	override void worldthingdamaged(Worldevent e)
	{	
		/*
		If(e.damagetype == "ice" || e.damagetype == "frost" || e.damagetype == "Freeze")
		{
			If(e.inflictor is "cryobite"){}
			Else If(e.thing.bismonster)
			{
				
					e.thing.takeinventory("CryoBite",1);
					e.thing.giveinventory("CryoBite",1);
				
			}
		}
		*/
		If(e.damagetype == "taunt" && !e.thing.findinventory("thisreallypissesmeoff") && e.thing.bismonster)
		{
		e.thing.bmissilemore = true;
		//e.thing.bmissileevenmore = true;
		e.thing.speed = (e.thing.speed * 1.5);
		e.thing.bnopain = true;
		e.thing.bnoinfighting = TRUE;
		e.thing.giveinventory("pissedarmor",1);
		e.thing.A_giveinventory("thisreallypissesmeoff",(e.thing.health / 70));
		}
		
		If(e.thing.findinventory("thisreallypissesmeoff") && e.thing.health < 1)
		{
		for(int i = e.thing.countinv("thisreallypissesmeoff"); i > 0; i--)
		{
		If(random(1,4) == 1)
		{
		e.thing.A_SpawnItemEx("ArmorShardFatalityBonus", 0, 0, 20, random (-1, 1), random (-1, 1), 8);
		}
		Else
		{
		e.thing.A_SpawnItemEx("HealthPlusFatalityBonus", 0, 0, 20, random (-1, 1), random (-1, 1), 8);
		}
		}
		e.thing.takeinventory("thisreallypissesmeoff",100);
		}
		//{
		
		/*
		If(e.damagetype == "extremepunches" && e.thing.health < 1 && e.thing.bismonster)
		{
		//for(int i = (1 + (e.thing.getspawnhealth() / 20)); i > 0; i--)
		//{
		e.thing.A_SpawnItemEx("HealthPlusFatalityBonus", 0, 0, 20, random (-1, 1), random (-1, 1), 8);
		e.thing.A_SpawnItemEx("ArmorShardFatalityBonus", 0, 0, 20, random (-1, 1), random (-1, 1), 8);
		If(e.thing.getspawnhealth() > 200)
		{
		e.thing.A_SpawnItemEx("HealthPlusFatalityBonus", 0, 0, 20, random (-1, 1), random (-1, 1), 8);
		e.thing.A_SpawnItemEx("ArmorShardFatalityBonus", 0, 0, 20, random (-1, 1), random (-1, 1), 8);
		e.thing.A_SpawnItemEx("HealthPlusFatalityBonus", 0, 0, 20, random (-1, 1), random (-1, 1), 8);
		e.thing.A_SpawnItemEx("ArmorShardFatalityBonus", 0, 0, 20, random (-1, 1), random (-1, 1), 8);
		}
		//}
		}
		*/
		
		if (e.thing.bismonster && e.damagetype != "desintegrate" && e.thing.health < 1 && e.thing.target && !e.thing.findinventory("extractedsoul"))
			{
			e.thing.a_giveinventory("extractedsoul",1);
			//e.thing.a_giveinventory("soulammo",1,AAPTR_TARGET);
			
			/*	
			If(e.thing.target is "demonplayer")
			{
			e.thing.target.health = (e.thing.target.health + 10);
			}
			*/
			}
	
	}
	
		Override void worldthingdied(worldevent e)
		{
			If(e.thing && e.thing.target && e.thing.bismonster && (e.thing.target is "Brutal_PlayerBase" || e.thing.target is "demonplayer"))
			{
				e.thing.target.giveinventory("PausePowerup",105);
			}
			int currentkills = Level.Killed_monsters;
		
			If(currentkills == 0)
			{
				mercilessgranted = false;
			}
			If(!mercilessgranted && currentkills > 5 && currentkills == (Level.Total_Monsters - 1) && e.thing && e.thing.bcountkill)
			{
				mercilessgranted = true;
				let modspawn = Actor.spawn("modifierspawner",e.thing.pos);
				If(modspawn)
				{
					modspawn.vel.z = 5;
					console.printf("Modifier Spawned!");
				}
			}
	
		}
	
	}
	
	
	
	CLASS GrabberModifier : Inventory
	{
		Default
		{
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		inventory.maxamount 1;
		}
		
		Override void modifydamage(int damage, name damagetype, out int newdamage, bool passive, actor inflictor, actor source, int flags)
			{
				If(!passive && inflictor && inflictor.findinventory("grabberdamage"))
					{
						Newdamage = (damage * 4.0);
						//owner.givebody(10);
						//owner.a_startsound("items/hellishhealthbonus",656);
						If(random(1,4) == 1)
						{
							Inflictor.A_SpawnItemEx("ArmorShardFatalityBonus", 0, 0, 20, random (-1, 1), random (-1, 1), 8);
						}
						Else
						{
							Inflictor.A_SpawnItemEx("HealthPlusFatalityBonus", 0, 0, 20, random (-1, 1), random (-1, 1), 8);
						}
					}
			}
	}
	
	CLASS GrabbedMonsterDamage : Inventory
	{
		Default
		{
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		inventory.maxamount 1;
		}
		
		Override void modifydamage(int damage, name damagetype, out int newdamage, bool passive, actor inflictor, actor source, int flags)
			{
				If(!passive)
					{
						Newdamage = (damage * 1.5);
					}
			}
	}
	
	
		CLASS pissedarmor : powerprotection
		{
			Default
			{
				inventory.maxamount 1;
				damagefactor "normal", 0.5;
				powerup.duration -44444444;
		
			}
		}
	
	
	
	
	Class voiddamage : inventory
	{
	 int dur;
	 bool flipped;
	 int newroll;
		Default
		{
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		inventory.maxamount 1;
		}
		Override void postbeginplay()
		{
		super.postbeginplay();
		If(random(0,100) > 50)
		{
		flipped = true;
		}
		Else
		{
		flipped = false;
		}
		newroll = frandom(9,35);
		}
		Override void doeffect()
		{
		If(owner)
		{
		(dur++);
		owner.tics = -1;
		Owner.scale = (owner.scale * 0.95);
		//owner.binvisible = true;
		If(owner.player)
		{
		owner.player.viewheight = (owner.player.viewheight * 0.95);
		}
		If( dur > 100)
		{
		owner.roll = 0;
		Owner.a_bossdeath();
		if(owner is "commanderkeen")
		{
		owner.a_keendie();
		}
		If(owner is "cyberdemonboss" || owner is "supermastermind")
		{
		If(owner is "greatcyberdemon")
		{
		return;
		}
		owner.a_braindie();
		}
		If(!owner.player)
		{
		Owner.destroy();
		}
		Else
		{
		owner.binvisible = true;
		}
		
		Depleteordestroy();
		}
		}
		super.doeffect();
		}
	}
	
	
	
	
	
	Class DontRedirect : inventory
	{
		Default
		{
		inventory.maxamount 1;
		}
		//Items that don't appear in the world don't need their tick 
		//It may help performance to override it? Idk if that's actually true
		Override void tick()
		{}
	}
	
	
	//hacky solution to keep decorate compatibility
	Class chattertimer : inventory
	{
		Default
		{
		inventory.maxamount 666;
		}
		Override void tick()
		{}
	}
	
	
	
	
	Class AlliedMarineBase : SwitchableDecoration
	{
		Int chattertimer;
	
		Override void postbeginplay()
		{
		super.postbeginplay();
		//This'll be important if you decide to use tehrealsalt's blurspheres so we can check for this token
		giveinventory("dontredirect",1);
		giveinventory("chattertimer",5);
		}
		
		Override void tick()
		{
		Super.tick();
		takeinventory("chattertimer",1);
		If(target && target is "Explosivebarrelbase")
		{
		A_cleartarget();
		}
		}
		
		action void A_MarineChatter( int TalkChance = 25, bool InCombat = false)
		{
			
			If(frandom(0,255) < TalkChance && !findinventory("chattertimer"))
			{
				giveinventory("chattertimer",220); //Puts a delay before another line can be said
				
				If(target && !target.findinventory("isplayer"))
				{
				A_startsound("MRNAT");
				}
				Else
				{
				A_startsound("MRNWC");
				}
			}
		}
		
	}
	
	
//Boss weapons times

Class CybieRocketTimer : Inventory {
	protected int dur; //this will hold the current value of duration
	int duration; //this will hold max duration
	property duration : duration; //this turns the variable above into a property
	string guntotake; //this is what weapon you want it to take
	property guntotake : guntotake; //this turns the string into a property
	string ammotogive; //this is what weapon you want it to take
	property ammotogive : ammotogive; //this turns the string into a property
	Default {
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		inventory.maxamount 1;
		CybieRocketTimer.duration 30;
		CybieRocketTimer.guntotake "Cyberdemonsmissilelauncher";
		CybieRocketTimer.ammotogive "CyberdemonRockets";
	}


	
	//Items that don't spawn in the world don't need their Tick. Emptying it will actually help performace:
	Override void Tick() {}
	
	
	Override void postbeginplay()
	{
	super.postbeginplay();
	If(owner)
	{
	owner.bnoradiusdmg = TRUE;
	owner.Takeinventory(ammotogive,999);
	owner.giveinventory(ammotogive, duration);
	}
	}
	
	//This function is executed every tic by items while they're in an actor's inventory:
	Override void DoEffect() {
		super.DoEffect();
		if (!owner || owner.isFrozen())
			return;
		
		/*
			This simple modulo operation allows us to do something every 35 tics (i.e. second)
			We'll increase the value of dur until it reaches duration, then remove the item.
		*/
		if (level.time % 35 == 0) {
			if (dur < duration)
			{
				If(!owner.findinventory("gofatality") && !owner.findinventory("hasagib"))
					{
						owner.Takeinventory(ammotogive,1);
						dur++;
					}
			}
			else {
		//	owner.takeinventory(guntotake,1);
			owner.bnoradiusdmg = FALSE;
				DepleteOrDestroy();
				
				return;
			}
		}
		
	}
}
	
	
	
	//Using inheritence so you can use this for the mastermind's chaingun
	
	Class MastermindBulletTimer : CybieRocketTimer
		{
			Default
			{
			CybieRocketTimer.guntotake "mastermindchaingun";
			CybieRocketTimer.ammotogive "SpiderChaingunTimer";
			
			}
	
		}
		
		Class monsterinventory : inventory
	{

		Default
		{
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		inventory.maxamount 1;
		}
		
		Override void doeffect()
			{
			/*
				If(owner && owner.target && owner.target.findinventory("gofatality"))
					{
						Owner.a_cleartarget();
					}
					*/
				Super.doeffect();
				
			}
	}

