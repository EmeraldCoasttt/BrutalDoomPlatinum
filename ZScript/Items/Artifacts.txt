CLASS NewAllMap : inventory replaces Allmap
{
Default
{
  -INVENTORY.FANCYPICKUPSOUND;
  Inventory.PickupSound "items/computermap";
  +COUNTITEM
		+INVENTORY.ALWAYSPICKUP
		Inventory.MaxAmount 0;
		Inventory.PickupMessage "$GOTMAP";
  }
  
  States
	{
	Spawn:
		TNT1 A 0 NODELAY A_startsound("COMPFAN",1,CHANF_LOOPING,0.75);
		PMAP ABCDCB 6 Bright;
		Loop;
	}
  Override void tick()
	{	
		Super.tick();
	}
	override bool TryPickup (in out Actor toucher)
	{
		level.allmap = true;
		A_StopSound(1);
	
	If(GetCvar("bd_allmapdx") == 0)
	{
	toucher.giveinventory("allthemap",1);
	}
	
			toucher.Score += 500;
			goawayanddie();
			return true;
	
	
		
	
	}
}

CLASS allthemap : powerupgiver
	{
		Default
		{
		Inventory.MaxAmount 0;
		Powerup.duration  0x7FFFFFFF;
		Powerup.type "powerscanner";
		+inventory.autoactivate;
		}
		States
		{
		Spawn:
		TNT1 A 1;
		Loop;
		}
}



class PowerShield : Powerup
{
	bool bhasplayedsound;
	int damagetimer;
	Default
	{
		Powerup.Duration 1;
		//Powerup.Color "00 00 FF", 0.5;
		+INVENTORY.HUBPOWER
	}
	
	override bool HandlePickup (Inventory item)
	{
		if (item.GetClass() == GetClass())
		{ // Setting EffectTics to 0 will force Powerup's HandlePickup()
		  // method to reset the tic count so you get the red flash again.
			EffectTics = 0;
		}
		return Super.HandlePickup (item);
	}

	//===========================================================================
	//
	// APowerStrength :: DoEffect
	//
	//===========================================================================

	override void Tick ()
	{
		// Strength counts up to diminish the fade.
		EffectTics += 2;
		Super.Tick();
	}
	
	override void ModifyDamage (int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags) {
	
	
	if (owner && passive && damage > 0)
	{
	if(owner.countinv("basicarmor") > 0)
	{
	owner.a_startsound("StickyGrenade/Hit",125);
	bhasplayedsound = false;
	damagetimer = 240;
	}
	
	
	}
	
	}
	
	override void doeffect()
	{
	
		
		
		damagetimer = (damagetimer - 1);
		If(owner.countinv("basicarmor") < 21 && owner.countinv("basicarmor") > 0)
		{
		owner.a_startsound("mjoln3",126,CHANF_LOOPING);
		}
		else if(owner.countinv("basicarmor") < 1)
		{
		owner.a_startsound("mjoln2",126,CHANF_LOOPING);
		}
		else
		{
		owner.a_stopsound(126);
		}
		
		If(damagetimer < 1 && owner && owner.countinv("basicarmor") < 50)
		{
			If(level.time % 1 == 0)
			{
			owner.giveinventory("mjolnirarmor", 1);
			}
			If(!bhasplayedsound)
			{
			//owner.a_startsound("mjoln",125,CHANF_NOSTOP);
			owner.a_startsound("mjoln",125,CHANF_NOSTOP,1.0,ATTN_NORM,0.0,(owner.countinv("basicarmor") / 50.0 ));
			bhasplayedsound = true;
			}
		}
		//Else
		//{
		//owner.a_stopsound(125);
		//}

		If(owner)
		{
		let playerArmor = BasicArmor(owner.FindInventory('BasicArmor'));
		playerArmor.SavePercent = 1.0;
		}
		
		If(owner && owner.countinv("basicarmor") > 0)
		{
		owner.bnoblood = true;
		}
		Else if (owner)
		{
		owner.bnoblood = false;
		}
		
		Super.doeffect();
	}

	//===========================================================================
	//
	// APowerStrength :: GetBlend
	//
	//===========================================================================
	
	Override void detachfromowner()
	{
	
	owner.bnoblood = false;
	super.detachfromowner();
	}
	
	
	
}


class PowerShield2 : Powershield
{
	Default
	{
		Powerup.Color "00 00 00", 0.0;
		-INVENTORY.HUBPOWER
	}
}

class mjolnirarmor : BasicArmorBonus
{
	Default
	{
		Radius 20;
		Height 16;
		Inventory.Pickupmessage "$GOTARMBONUS";
		Inventory.Icon "ARM2A0";
		Armor.Savepercent 100;
		Armor.Saveamount 1;
		Armor.Maxsaveamount 100;
		+COUNTITEM
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Spawn:
		BON2 ABCDCB 6;
		loop;
	}
}


CLASS PowerAreaScan : Powerup
{
Default
	{
		Powerup.Duration -7;
		Powerup.Color "11 FF 00", 0.9;
		+INVENTORY.HUBPOWER
	}
	
	override void Tick ()
	{
		// Strength counts up to diminish the fade.
		EffectTics += 6;
		Super.Tick();
	}
	
	
	override color GetBlend ()
	{
		// slowly fade the berserk out
		int cnt = 128 - (EffectTics>>3);

		if (cnt > 0)
		{
			return Color(BlendColor.a*cnt/256,
				BlendColor.r, BlendColor.g, BlendColor.b);
		}
		return 0;
	}

}


Class PowerTimeFreezerNu : PowerTimeFreezer
{
	int freezertics;
	Default
	{
		+Inventory.NOSCREENBLINK;
		Powerup.duration -60;
	}
	override void initeffect()
	{
		owner.A_startsound("TIMEFREZ",66,0,1.0,ATTN_NONE);
		owner.giveinventory("PowerChronoEffect",1);
		Super.initeffect();
	}
	override void doeffect()
	{
		Super.doeffect();
		
		Freezertics = freezertics + 1;
		
		
		 S_ResumeSound(false);
      S_PauseSound(false, true); // This will freeze music, but not sound effects.
      if (Level.maptime & 1 || (Owner != null && Owner.player != null && Owner.player.cheats & CF_PREDICTING))
      {
         return;
      }
      Level.SetFrozen ( EffectTics > 4*32
         || (( EffectTics > 3*32 && EffectTics <= 4*32 ) && ((EffectTics + 1) & 15) != 0 )
         || (( EffectTics > 2*32 && EffectTics <= 3*32 ) && ((EffectTics + 1) & 7) != 0 )
         || (( EffectTics >   32 && EffectTics <= 2*32 ) && ((EffectTics + 1) & 3) != 0 )
         || (( EffectTics >    0 && EffectTics <= 1*32 ) && ((EffectTics + 1) & 1) != 0 ));
		If(freezertics >= 1045)
		{
		DepleteorDestroy();
		}
	}

}


CLASS PowerChronoEffect : Powerup
{
Default
	{
		Powerup.Duration -30;
		Powerup.Color "FF 6C 00";
		+INVENTORY.HUBPOWER
	}
}

class SalInvisibleActor : Actor
{
	Default
	{
		+NONSHOOTABLE
		+NODAMAGE
		+THRUACTORS
		+NOTELEPORT
		+DROPOFF
		+isMonster;
		//RenderStyle "None";
	}
	States
	{
		Spawn:
			TNT1 A -1;
			WAIT;
	}
}

class SalInvisHandler : EventHandler
{
	Array <Actor> monsterList;
	SalInvisibleActor playerInvisTarget[MAXPLAYERS];

	void SalInvisTargetStatus(int i)
	{
		let mo = players[i].mo;

		if (mo)
		{
			let targ = playerInvisTarget[i];

			if (targ && mo.bShadow == false)
			{
				// Destroy it if it exists
				targ.Destroy();
			}
		}
	}

	void SalMoveInvisTarget(int i)
	{
		let mo = players[i].mo;

		if (mo)
		{
			let targ = playerInvisTarget[i];

			if (mo.bShadow == true)
			{
				if (targ)
				{
					// Move the existing one directly to your current position
					targ.SetOrigin(mo.pos, false);
				}
				else
				{
					// Create a new invisible target spot at your location
					playerInvisTarget[i] = SalInvisibleActor(mo.Spawn("SalInvisibleActor", mo.pos, NO_REPLACE));
				}
			}
		}
	}

	override void WorldThingSpawned(WorldEvent e)
    {
		if (e.Thing.bIsMonster)
		{
			// Store in a list for later.
			monsterList.push(e.Thing);
		}
	}

	override void WorldTick()
	{
		Array <Actor> removalList;

		for (int i = 0; i < MAXPLAYERS; i++)
		{
			let target = playerInvisTarget[i];

			if (!playeringame[i])
			{
				if (target)
				{
					target.Destroy();
				}
				continue;
			}
			else
			{
				let mo = players[i].mo;

				if (!target)
				{
					SalMoveInvisTarget(i);
				}
				else
				{
					SalInvisTargetStatus(i);

					if (mo.CurState == mo.ResolveState("Missile")
						|| mo.CurState == mo.ResolveState("Melee")
						|| mo.CurState == mo.ResolveState("Pain")
						|| mo.findinventory("moveblurspheretarget"))
					{
						SalMoveInvisTarget(i);
						mo.takeinventory("moveblurspheretarget",1);
					}
				}
			}
		}

		for (int i = 0; i < monsterList.Size(); i++)
        {
            Actor mo = monsterList[i];

			if (!mo || mo.health <= 0)
			{
				// Must be removed later, because we can't change iteration length.
				removalList.push(mo);
				continue;
            }

			if (mo.bSeeInvisible)
			{
				// Don't remove, but don't do the target setting either
				continue;
			}
			else if (mo.bmissile)
			{
				// Don't remove, but don't do the target setting either
				continue;
			}
			else
			{
				let target = PlayerPawn(mo.target);

				if (target)
				{
					let n = target.PlayerNumber();
					let invisTarget = playerInvisTarget[n];

					if (invisTarget)
					{
						// Your target has a SalInvisTarget,
						// so you need to change your target to it immediately.
						mo.target = invisTarget;
					}
				}
			}
        }

		for (int i = 0; i < removalList.Size(); i++)
        {
            int j = monsterList.Find(removalList[i]);
            monsterList.Delete(j);
        }
	}
}


CLASS PowerBoost : Powerup
{
	Default
	{
		Powerup.Duration 0x7FFFFFFD;
		+INVENTORY.HUBPOWER;
		+INVENTORY.NOTELEPORTFREEZE;
	}
}

CLASS PowerNightVisNeo : Powerup
{
	Default
	{
		Powerup.Duration 0x7FFFFFFD;
		+INVENTORY.HUBPOWER;
	}
}

class BoosterFrame : CustomInventory
{
	Default
	{
		+COUNTITEM
		+INVENTORY.ALWAYSPICKUP
		Inventory.PickupMessage "You got the Booster Frame!";
		Inventory.PickupSound "BSTRPUP";
		Scale 0.5;
	}
	States
	{
	Spawn:
		BFRM A -1;
		Stop;
	Pickup:
		TNT1 A 0 A_GiveInventory("PowerBoost");
		Stop;
	}
	
	 override bool TryPickup (in out Actor toucher)
	{
	If( Super.trypickup(Toucher))
		{
			toucher.Score += 500;
			return true;
		}
		Else
		{
		return false;
		}
	}
}




CLASS PowerRage : PowerSpeed
{
Default
	{
		Powerup.Duration -30;
		//Powerup.Color "91 00 00";
		Speed 1.5;
		+INVENTORY.HUBPOWER
	}
	override void initeffect()
	{
		owner.giveinventory("PowerStrength",1);
		Super.initeffect();
	}
	Override void tick()
	{
		if (Owner == NULL)
		{
			Destroy ();
		}
		//console.printf("%i",EffectTics);
		If(effecttics == 104)
		{
			Owner.a_startsound("BRSKWARN",108);
		}
		If(owner && !owner.findinventory("pausepowerup") || owner && EffectTics < 105)
		{
			if (EffectTics == 0 || (EffectTics > 0 && --EffectTics == 0))
			{
			Destroy ();
			}
		}
	}
	override void doeffect()
	{
		If(owner)
		{
			owner.A_selectweapon("melee_attacks");
		}
		Super.doeffect();
	}
	
	override void ModifyDamage (int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
	
		
		If(passive)
		{
			newdamage = (damage * 0.25);
		}
		Else If(owner && damage > 1000)
		{
			Owner.givebody(10);
			newdamage = damage;
			source.a_startsound("Items/Rage/Kill",624);
		}
		
	
	}
}

CLASs BDPInvuln : PowerInvulnerable
{
Override void tick()
	{
		if (Owner == NULL)
		{
			Destroy ();
		}
		If(effecttics == 104)
		{
			Owner.a_startsound("INVOFF",108);
		}
		If(owner && !owner.findinventory("pausepowerup") || owner && EffectTics < 105)
		{
		if (EffectTics == 0 || (EffectTics > 0 && --EffectTics == 0))
		{
			Destroy ();
		}
		}
	}
}

CLASS powerspeed2 : powerspeed
{
Default
{
Speed 1.7;
+INVENTORY.NOTELEPORTFREEZE;
inventory.icon "TNT1A0";
}
Override void tick()
	{
		if (Owner == NULL)
		{
			Destroy ();
		}
		If(effecttics == 104)
		{
			Owner.a_startsound("HASTEOFF",108);
		}
		If(owner && !owner.findinventory("pausepowerup") || owner && EffectTics < 105)
		{
		if (EffectTics == 0 || (EffectTics > 0 && --EffectTics == 0))
		{
			Destroy ();
		}
		}
	}

}


CLASS PowerquakeDamage : PowerDamage
{
Default
{
damagefactor "normal", 4;
//Inventory.icon "SIG2A0"
//activesound "items/quaddamage";
}

Override void tick()
	{
		if (Owner == NULL)
		{
			Destroy ();
		}
		
		If(EffectTics == 104)
		{
			Owner.a_startsound("items/quaddamage/warn",107);
		}
		
		If(owner && !owner.findinventory("pausepowerup") || owner && EffectTics < 105)
		{
			if (EffectTics == 0 || (EffectTics > 0 && --EffectTics == 0))
			{
				Destroy ();
			}
		}
	}
}

CLASs BDPBlur : PowerInvisibility
{
	Default
	{
		+INVENTORY.NOSCREENBLINK;
	}
Override void tick()
	{
		if (Owner == NULL)
		{
			Destroy ();
		}
		If(effecttics == 104)
		{
			Owner.a_startsound("BLURWARN",108);
		}
		If(effecttics == 15)
		{
			Owner.a_startsound("INVISOFF",107);
		}
		If(owner && !owner.findinventory("pausepowerup") || owner && EffectTics < 105)
		{
		if (EffectTics == 0 || (EffectTics > 0 && --EffectTics == 0))
		{
			
			Destroy ();
		}
		}
	}
	
	override void AlterWeaponSprite (VisStyle vis, in out int changed)
	{
		
		if (changed == 1)
		{
			// something else set the weapon sprite back to opaque but this item is still active.
			float ts = float((Strength / 100) * (special1 + 1));
			vis.Alpha = clamp((1. - ts), 0., 1.);
			switch (Mode)
			{
			case 'Fuzzy':
				vis.RenderStyle = STYLE_OptFuzzy;
				break;
			case 'Opaque':
				vis.RenderStyle = STYLE_Normal;
				break;
			case 'Additive':
				vis.RenderStyle = STYLE_Add;
				break;
			case 'Stencil':
				vis.RenderStyle = STYLE_Stencil;
				break;
			case 'TranslucentStencil':
				vis.RenderStyle = STYLE_TranslucentStencil;
				break;
			case 'AddStencil':
				vis.RenderStyle = STYLE_AddStencil;
				break;
			case 'None':
			case 'Cumulative':
			case 'Translucent':
			default:
				vis.RenderStyle = STYLE_Translucent;
				break;
			}
		}
		// Handling of Strife-like cumulative invisibility powerups, the weapon itself shouldn't become invisible
		if ((vis.Alpha < 0.25f && special1 > 0) || (vis.Alpha == 0))
		{
			vis.Alpha = clamp((1. - Strength/100.), 0., 1.);
			vis.invert = true;
		}
		changed = -1;	// This item is valid so another one shouldn't reset the translucency
	}
}

// Invulnerability Sphere ---------------------------------------------------

CLASS InvulnerabilitySphere_  : PowerupGiver Replaces InvulnerabilitySphere
{
	Default
	{
		+COUNTITEM;
		//these 3 make it float. If you want to remove the floating effects, remove those 3 properties.
		+NOGRAVITY;
		+FLOATBOB;
		FloatSpeed 1;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
		Inventory.MaxAmount 0;
		Powerup.Type "BDPInvuln";
		//Powerup.Colormap 0.0, 0.0, 0.0, 1.0,1.0,1.0
		Inventory.PickupMessage "$GOTINVUL";
		Tag "Invulnerability";
	}
	States
	{
	Spawn:
	    TNT1 A 0 A_PlaySound("POWERHUM", 0, 0.4, 1);
		PINV AAABBBCCCDDD 2 Bright A_SpawnItem("GreenFlareMedium",0,20);
		Loop;
	}
	override bool TryPickup (in out Actor toucher)
	{
	If( Super.trypickup(Toucher))
		{
			toucher.Score += 500;
			return true;
		}
		Else
		{
		return false;
		}
	}
}




// Soulsphere --------------------------------------------------------------

Class LifeSphere : CustomInventory Replaces SoulSphere
{
	Default
	{
		+COUNTITEM;
		+NOGRAVITY;
		+FLOATBOB;
		FloatSpeed 1;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "Soulsphere";
		Inventory.PickupSound "items/soulsphere";
		Tag "Soulsphere";
	}
	States
	{
	Spawn:
	   TNT1 A 0 NODELAY A_startSound("POWERHUM",4,CHANF_LOOPING);
		SOUL AAABBBCCCDDDCCCBBB 2 Bright A_SpawnItem("BlueFlareMedium2",0,20);
		Loop;
	Pickup:
		TNT1 A 0 A_stopsound(4);
        TNT1 AAAAAAAAAAAAA 0 A_CustomMissile ("ShinnySmoke", 0, 0, random (0, 360), 2, random (0, 360));
		TNT1 A 0 A_GiveInventory("SoulSphereHealth", 1);
		Stop;
	}
	override bool TryPickup (in out Actor toucher)
	{
	If( Super.trypickup(Toucher))
		{
			toucher.Score += 500;
			return true;
		}
		Else
		{
		return false;
		}
	}
}

CLASS LifeSphereOneUp : LifeSphere
{
	Default
	{
		Inventory.PickupSound "1UP";
	}
	States
	{
	Pickup:
		TNT1 A 0 A_stopsound(4);
        TNT1 AAAAAAAAAAAAA 0 A_CustomMissile ("ShinnySmoke", 0, 0, random (0, 360), 2, random (0, 360));

		Stop;
	}
		override bool TryPickup (in out Actor toucher)
	{
		toucher.Score += 500;
		brutal_playerbase BDPplr = brutal_playerbase(toucher);
		If(BDPplr)
		{
			BDPplr.extralives ++;
		}
		GoAwayAndDie();
		return true;
	}
}

CLASS SoulSphereHealth : Health	
{
	Default
	{
		Inventory.Amount 100;
		Inventory.MaxAmount 200;
		+INVENTORY.ALWAYSPICKUP;
	}
	

}

CLASS EnergySphere : CustomInventory Replaces Megasphere
{
	Default
	{
		+COUNTITEM;
		+NOGRAVITY;
		+FLOATBOB;
		FloatSpeed 1;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "Megasphere";
		Inventory.PickupSound "items/soulsphere";
		Tag "Megasphere";
	}
	States
	{
	Spawn:
	    TNT1 A 0 A_StartSound("MEGAHUM",4,CHANF_LOOPING);
		MEGA AABBCCDD 2 BRIGHT A_SpawnItem("LensFlare",0,35);
		Loop;

	Pickup:
		TNT1 A 0 A_stopsound(4);
        TNT1 AAAAAAAAAAAAA 0 A_CustomMissile ("ShinnySmoke", 0, 0, random (0, 360), 2, random (0, 360));
		TNT1 A 0 A_GiveInventory("HeavyArmor", 1);
		TNT1 AA 0 A_GiveInventory("SoulsphereHealth", 1);
		Stop;
	}
	override bool TryPickup (in out Actor toucher)
	{
	If( Super.trypickup(Toucher))
		{
			toucher.Score += 300;
			return true;
		}
		Else
		{
		return false;
		}
	}
}	

CLASS EnergySphereOneUp : EnergySphere
{
	Default
	{
		Inventory.PickupSound "1UP";
	}
	States
	{
	
	Pickup:
		TNT1 A 0 A_stopsound(4);
        TNT1 AAAAAAAAAAAAA 0 A_CustomMissile ("ShinnySmoke", 0, 0, random (0, 360), 2, random (0, 360));

		Stop;
	}
	override bool TryPickup (in out Actor toucher)
	{
		toucher.Score += 500;
		brutal_playerbase BDPplr = brutal_playerbase(toucher);
		If(BDPplr)
		{
			BDPplr.extralives += 3;
		}
		GoAwayAndDie();
		return true;
	}
}	


CLASS MiniInvul : InvulnerabilitySphere
{
	Default
	{
		Tag "Invulnerability";
		Powerup.Duration -5;
		Powerup.Colormap 0.0, 0.0, 0.0, 1.0,1.0,1.0;
	}
}

// infrared -----------------------------------------------------------------

CLASS NightVision : CustomInventory  Replaces InfraRed
{
	Default
	{
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You got the Infrared Vision Googles.";
		Inventory.PickupSound "items/nightvision";
	}
	States
	{
	Spawn:
		TNT1 A 0 A_CheckSight("Spawn2");
		SVIS E 7;
		SVIS D 3 Bright A_SpawnItem("RedFlareVerySmall",0,10);
		SVIS C 2 Bright A_SpawnItem("RedFlareVerySmall",0,10);
		SVIS BAB 1 Bright A_SpawnItem("RedFlareVerySmall",0,10);
		SVIS C 2 Bright A_SpawnItem("RedFlareVerySmall",0,10);
		SVIS D 3 Bright A_SpawnItem("RedFlareVerySmall",0,10);
		Loop;
	Spawn2:
		SVIS E 4;
		SVIS DCBACD 2 BRIGHT;
		Goto Spawn;
		
	Pickup:
		TNT1 A 1 A_GiveInventory("NightVisionGiver",1);
		Stop;
		
	}
	override bool TryPickup (in out Actor toucher)
	{
	If( Super.trypickup(Toucher))
		{
			toucher.Score += 500;
			return true;
		}
		Else
		{
		return false;
		}
	}
}



CLASS NightVisionGiver : PowerupGiver
{
	Default
	{
		+COUNTITEM;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.MaxAmount 0;
		powerup.type "powerNightVisNeo";
		+inventory.autoactivate;
		//Powerup.Color 99 99 99;
		Inventory.PickupMessage "$GOTVISOR";
		
	}
	States
	{
	Spawn:
		SVIS E 7;
		SVIS D 3 Bright A_SpawnItem("RedFlareVerySmall",0,10);
		SVIS C 2 Bright A_SpawnItem("RedFlareVerySmall",0,10);
		SVIS BAB 1 Bright A_SpawnItem("RedFlareVerySmall",0,10);
		SVIS C 2 Bright A_SpawnItem("RedFlareVerySmall",0,10);
		SVIS D 3 Bright A_SpawnItem("RedFlareVerySmall",0,10);
		Loop;
		
	}
}


// Berserk ------------------------------------------------------------------

CLASS BerserkPack : CustomInventory Replaces Berserk
{
	DEFAULT
	{
		Scale 1.2;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "$GOTBERSERK";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.PickupSound "BERSPKUP";
		+Inventory.NEVERRESPAWN;
		Tag "Berserk Pack";
	}
	States
	{
	Spawn:
		MEDK C 0;
		//MEDK C 0 A_SpawnItemEx("EvidenceCheckerbERSERk", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION)
		//TNT1 A 0 A_JUMP(64,"spawn5")
		TNT1 A 0 A_Jump(94,"Spawn3");
	Spawn1:	
		TNT1 A 0 A_CheckSight("Spawn2")	;
		MEDK C 2 A_SpawnItem("RedFlareVerySmall",0,10);
		Loop;
	Spawn2:
		MEDK C 14;
		Goto Spawn1;
	Spawn3:	
		TNT1 A 0 A_CheckSight("Spawn4");
		MEDK D 2 A_SpawnItem("RedFlareVerySmall",0,10);
		Loop;
	Spawn4:
		MEDK D 14;
		Goto Spawn3;
	Spawn5:
	TNT1 A 0 A_spawnitemex("demonrunespawner");
	STOP;
	Pickup:
		TNT1 A 0 A_GiveInventory("PowerStrength");
		TNT1 A 0 HealThing(100, 0);
		//TNT1 A 20 ACS_NamedExecuteAlways("BerserkMessage")
		TNT1 A 0 A_SelectWeapon("Melee_Attacks");
		//TNT1 A 0 A_Print ("Press Reload to alternate execution modes.")
		Stop;
	}
	override bool TryPickup (in out Actor toucher)
	{
	If( Super.trypickup(Toucher))
		{
			toucher.Score += 500;
			return true;
		}
		Else
		{
		return false;
		}
	}
}

CLASS Berserk2 : powerupgiver
{
	Default
	{
		powerup.type "powerstrength";
		+inventory.autoactivate;
	}
}

Class SuperBlurSphere : Blursphere REPLACES Blursphere
{
	Default
	{
	  +COUNTITEM;
	  +NOGRAVITY;
	  +FLOATBOB;
	  FloatSpeed 1;
	  +VISIBILITYPULSE;
	  +INVENTORY.AUTOACTIVATE;
	  +INVENTORY.ALWAYSPICKUP;
	  +INVENTORY.BIGPOWERUP;
	  RenderStyle "Translucent";
	  Inventory.PickupMessage "$GOTINVIS";
	  powerup.type "BDPBlur";
	  Powerup.Duration -30;
	  Inventory.PickupSound "INVISON";
  }
  States
  {
  Spawn:
		TNT1 A 0 A_startSound("INVISHUM",4,CHANF_LOOPING);
     PINS AABBCCDDCCBB 2 Bright A_SpawnItem("RedFlare", 0, 24);
     Loop;
	Pickup:
		TNT1 A 0 A_stopsound(4);
		STOP;
  }
  override bool TryPickup (in out Actor toucher)
	{
	If( Super.trypickup(Toucher))
		{
			toucher.Score += 500;
			return true;
		}
		Else
		{
		return false;
		}
	}
}


Class QuadSigil : PowerUpGiver
{
	Default
	{
		+COUNTITEM;
		+NOGRAVITY;
		+FLOATBOB;
		FloatSpeed 1;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "Quad Rampage!";
		Inventory.PickupSound "sigil/quake";
		Tag "Soulsphere";
		powerup.duration -30;
		//powerup.color "purple"
		powerup.type "Powerquakedamage";
		+inventory.autoactivate;
	}
	States
	{
	Spawn:
	    TNT1 A 0 NODELAY A_PlaySound("QUADHUM", 5, 0.7);
		QUAK BBBCCCBBBCCCBBBCCCBBBCCCBBBCCCBBBCCCBBBCCCBBBCCCBBBCCCBBBCCCBBBCCCBBBCCCBBBCCCBBBCCCBBBCCCBBBCCCBBBCCC 2 Bright;// A_SpawnItem("PurpleFlareSmall",0,30)
		Loop;
	Pickup:
		TNT1 A 0 A_stopsound(5);
        TNT1 AAAAAAAAAAAAA 0 A_CustomMissile ("ShinnySmoke", 0, 0, random (0, 360), 2, random (0, 360));
		Stop;
	}
	override bool TryPickup (in out Actor toucher)
	{
	If( Super.trypickup(Toucher))
		{
			toucher.Score += 500;
			return true;
		}
		Else
		{
		return false;
		}
	}
}


CLASS HasteSphere : PowerUpGiver
{
	Default
	{
		+COUNTITEM;
		+NOGRAVITY;
		+FLOATBOB;
		FloatSpeed 1;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "Haste Sphere!";
		Inventory.PickupSound "sigil/haste";
		Tag "Soulsphere";
		powerup.duration -30;
		//powerup.color "Yellow"
		powerup.type "PowerSpeed2";
		+inventory.autoactivate;
	}
	States
	{
	Spawn:
	    TNT1 A 0 A_PlaySound("POWERHUM", 0, 0.4, 1);
		TURB AAABBBCCCBBB 2 Bright A_SpawnItem("YellowFlareSmall",0,20);
		Loop;
	Pickup:
        TNT1 AAAAAAAAAAAAA 0 A_CustomMissile ("ShinnySmoke", 0, 0, random (0, 360), 2, random (0, 360));
		Stop;
	}
	override bool TryPickup (in out Actor toucher)
	{
	If( Super.trypickup(Toucher))
		{
			toucher.Score += 500;
			return true;
		}
		Else
		{
		return false;
		}
	}
}



CLASS Biovision : powerupgiver
{
	Default
	{

+inventory.autoactivate;
inventory.maxamount 0;
powerup.duration -60;
//	powerup.color "purple"
	powerup.type "powertorch";
	}
}

CLASS Biofeet : powerupgiver
{
Default
{
+inventory.autoactivate;
inventory.maxamount 0;
powerup.duration -60;
//	powerup.color "purple"
	powerup.type "powerironfeet";
	}
}




CLASS CyberdemonGunSpawner: CustomInventory
{
Default
{
 scale 1.0;
 radius 12;
 height 14;
 Inventory.maxamount 1;
Inventory.PickupSound "BFGREADY";
Inventory.useSound "BFGREADY";

 +inventory.invbar;
 inventory.icon "SIG1C0";
 Inventory.PickupMessage "You got the Cyberdemon's missile launcher!";
 Tag "Cyberdemon's Missile Launcher";
 Mass 1;
 }
    States
    {
	 Spawn:
		CYBF W 1;
		Loop;
			Use:
			TNT1 A 0 A_jumpifinventory("TemporaryWEapon",1,"youstupid");
	    TNT1 A 0 A_stopsound();
		TNT1 A 0 ACS_namedexecutealways("useCyberDemonGun");
		TNT1 A 0 ;
		TNT1 A 0 ;
		TNT1 A 20;
		//TNT1 A 0 A_Print ("Demon Strength Sigil Activated!")
		Stop;
		
		Youstupid:
		TNT1 A 0 A_giveinventory("cyberdemongunspawner",1);
		STOP;
	//Pickup:
	//    TNT1 A 1
		//TNT1 A 0 ACS_NamedExecuteAlways("LogCyberdemonGunMessage", 0, 0, 0, 0)
		//TNT1 A 0 A_GiveInventory("CyberdemonsMissileLauncher",1)
//		TNT1 A 0 A_GiveInventory("CyberdemonRockets", 30)
	//	Stop
    }
}

CLASS MastermindChaingunPickup : CustomInventory
{
Default
{
	 scale 1.1;
	 radius 24;
	 height 24;
	 Inventory.maxamount 1;
	 +THRUACTORS +FORCEXYBILLBOARD;
	 Inventory.PickupSound "ROCKPKUP";
	  Inventory.useSound "ROCKPKUP";
	 Inventory.PickupMessage "You got the Spider Mastermind's Chaingun!";
	 Tag "Mastermind's Chaingun";
	 Mass 1;
	 +inventory.invbar;
	 inventory.icon "SIG1B0";
 }
    States
    {

	 Spawn:
		TNT1 A 0;
		RMNG T 3;
		TNT1 A 0 A_ChangeFlag("THRUACTORS", 0);
	Stay:
		RMNG T 2;
		Loop;
			Use:
			TNT1 A 0 A_jumpifinventory("TemporaryWeapon",1,"youstupid");
	    TNT1 A 0 A_stopsound();
		TNT1 A 0 ACS_namedexecutealways("useMastermindGun");
		TNT1 A 0 ;
		TNT1 A 0 ;
		TNT1 A 20;
		//TNT1 A 0 A_Print ("Demon Strength Sigil Activated!")
		Stop;
		
		Youstupid:
		TNT1 A 0 A_giveinventory("mastermindchaingunpickup",1);
		STOP;
		/*
	Pickup:
	    TNT1 A 0
		TNT1 A 0 ACS_NamedExecuteAlways("LogCyberdemonGunMessage", 0, 0, 0, 0)
		TNT1 A 0 A_GiveInventory("MastermindChaingun", 1)
		Stop
		*/
    }
}



Class RadSuits : CustomInventory Replaces Radsuit
{
Default
{
	  Height 46;
	  +INVENTORY.AUTOACTIVATE;
	  +INVENTORY.ALWAYSPICKUP;
	  Inventory.MaxAmount 0;
	  Inventory.PickupMessage "$GOTSUIT" ;
	  Inventory.PickupSound "items/radsuit";
 }
  States
  {
  Spawn:
    SUIT A 10;
	SUIT A 10 BRIGHT;
	Loop;
  Pickup:
		TNT1 A 0;
		TNT1 A 0 A_GiveInventory("Radsuit3", 1);
		//TNT1 A 0 A_GiveInventory("Radsuit2", 1)
		Stop;
  }
  override bool TryPickup (in out Actor toucher)
	{
	If( Super.trypickup(Toucher))
		{
			toucher.Score += 500;
			return true;
		}
		Else
		{
		return false;
		}
	}
}

CLASS RadSuit2 : PowerupGiver
{
	Default
	{
	  Height 46;
	  +INVENTORY.AUTOACTIVATE;
	  +INVENTORY.ALWAYSPICKUP;
	  Inventory.MaxAmount 0;
	  Inventory.PickupMessage "$GOTSUIT";
	  Powerup.Type "PowerMask";
	  Powerup.Duration -60;
  }
  States
  {
  Spawn:
    SUIT A 10;
	SUIT A 10 BRIGHT;
	Loop;
  }
}



CLASS RadSuit3 : PowerupGiver
{
	Default
	{
	  Height 46;
	  +INVENTORY.AUTOACTIVATE;
	  +INVENTORY.ALWAYSPICKUP;
	  Inventory.MaxAmount 0;
	  Powerup.Color "None";
	  Inventory.PickupMessage "$GOTSUIT";
	  Powerup.Type "PowerIronFeet";
  }
  States
  {
  Spawn:
    SUIT A 10;
	SUIT A 10 BRIGHT;
	Loop;
  }
}
		

Class RageSphere : PowerupGiver
{
	Default
	{
	+COUNTITEM;
	//these 3 make it float. If you want to remove the floating effects, remove those 3 properties.
	+NOGRAVITY;
	+FLOATBOB;
	FloatSpeed 1;
	+INVENTORY.AUTOACTIVATE;
	+INVENTORY.ALWAYSPICKUP;
	+INVENTORY.BIGPOWERUP;
	Inventory.MaxAmount 0;
	Powerup.Type "PowerRage";
	//Powerup.Colormap 0.0, 0.0, 0.0, 1.0,1.0,1.0
	Inventory.PickupMessage "Rage sphere! Liquify them.";
	Tag "Rage Sphere";
	Inventory.PickupSound "RAGEPUP";
	}
	States
	{
	Spawn:
	    TNT1 A 0 A_PlaySound("POWERHUM", 0, 0.4, 1);
		DDMG AAABBBCCCDDD 2 Bright A_SpawnItem("RedFlareMedium",0,20);
		Loop;
	}
	
	 override bool TryPickup (in out Actor toucher)
	{
	If( Super.trypickup(Toucher))
		{
			toucher.Score += 500;
			return true;
		}
		Else
		{
		return false;
		}
	}
}

