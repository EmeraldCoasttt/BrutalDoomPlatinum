

CLASS HoverTank_Ball : Actor
{
	Default
	{
		Radius 10;
		Height 2;
		Speed 30;
		Damagefunction (random(50, 300));
		DamageType "desintegrate";
		Decal "SmallerScorch";
		Projectile;
		+RANDOMIZE;
		+SPECTRAL;
		//+SHOOTABLE;
		-NOBLOCKMAP;
		+NOBLOOD;
		+NORADIUSDMG;
		+THRUSPECIES;
		+MTHRUSPECIES;
		+FORCEXYBILLBOARD;
		-nogravity;
		Gravity 1.0;
		Scale 1.0;
		renderstyle "ADD";
		alpha 0.99;
		Scale 0.4;
		DeathSound "None";
		SeeSound "None";
		Obituary "$OB_MPPLASMARIFLE";
	}
	States
	{

		Spawn:
			BFSB AB 1 BRIGHT A_spawnitemex("blueflare");
			Loop;

		Death:
			TNT1 A 0 a_setscale(2.0,2.0);
				PLSE ABC 2 BRIGHT A_SpawnItem("BlueFlare");
		
			//BG2G A 0 A_SpawnItem("RocketExplosion")
			BG2G A 0 Radius_Quake(3, 2, 0, 12, 0);
			BG2G A 0 Bright A_SpawnItem("WhiteShockWave",0,0,0);
			EXPL AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_CustomMissile ("BluePlasmaParticle", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_CustomMissile ("BFGDeathParticleFastBlue", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL AAAA 0 A_CustomMissile ("BFGBIGFOGBLUE", 0, 0, random (0, 360), 2, random (0, 360));
			TNT1 AAAAAAA 0 A_CustomMissile ("BlueExplosionFire", 2, 0, random (0, 360), 2, random (0, 360));
			EXPL AA 0 A_CustomMissile ("BigNeoSmoke", 0, 0, random (0, 360), 2, random (0, 360));
			TNT1 A 0 A_Explode(250,350);
			PLSE DE 2 Bright A_SpawnItemEX("BlueFlare");
			BG2G A 0 A_StartSound("FAREXPL",7);
			BG2G A 0 A_StartSound("HTANKE");
			TNT1 AAAA 2 A_CustomMissile ("BigNeoSmoke", 2, 0, random (0, 360), 2, random (0, 360));
			TNT1 A 35;
			Stop;
	}
}


class HoverTank_TurretBase : VehPart
{
	
	Scorpion_TurretCannon cannon;
	Default
	{
		Radius 32;
		Height 32;
		Scale 1.3;
		+SOLID;
	}
	
	override void OnAttach()
	{
			//cannon = Scorpion_TurretCannon( VehPart.Attach("Scorpion_TurretCannon", base,(30,0,12)) );
		//cannon.turretbase = self;
	}
	
	override void UpdatePos(bool moving)
	{
		if(!base) return;
		vector3 finalpos = GetOffsetPos(base);
		SetOrigin(finalpos, moving);
		
		A_SetAngle(base.angle, SPF_INTERPOLATE);
		A_SetRoll(base.roll, SPF_INTERPOLATE);
		A_SetPitch(base.pitch, SPF_INTERPOLATE);
	}
	
	States
	{
		Spawn:
			TNK1 B 1;
		loop;
	}
}

class HoverTank_TurretCannon : VehPart
{
	uint cooldown;
	uint cooldown_chaingun;
	bool guncycle;
	bool guncycle2;
	bool gun2;
	Default
	{
		Radius 16;
		Height 16;
	}
	
	override void UpdatePos(bool moving)
	{
		if(!base) return;
		vector3 finalpos = GetOffsetPos(base);
		SetOrigin(finalpos, moving);
		
		A_SetAngle(base.angle, SPF_INTERPOLATE);
		A_SetRoll(base.roll, SPF_INTERPOLATE);
		
		double potentialpitch = getangletocamera();
		double aimpitch;
		If(potentialpitch)
		{
			aimpitch = potentialpitch;
		}
		Else
		{
			aimpitch = base.driver ? base.driver.pitch - 5 : 0;
		}
		aimpitch = clamp(aimpitch, -50, 5);
		If(base.driver)
		{
			A_SetPitch(BDPMath.Lerp(pitch, aimpitch, 0.25), SPF_INTERPOLATE);
		}
		else
		{
			A_SetPitch(BDPMath.Lerp(pitch, base.pitch + aimpitch, 0.25), SPF_INTERPOLATE);
		}
		
	}
		
	override void DoUpdate(VehCamera cam)
	{
		let tank = BDPHoverTank(base);
		if(!tank) return;
		if(!cam) return;
	
		if(cooldown_chaingun) cooldown_chaingun--;
		if(cooldown) 
		{
			cam.SetZoom(1.0, 0.1);
			cooldown--;
		}
		if(CheckButtons(BT_ATTACK, VehButtons.BTS_DOWN) && !cooldown)
		{
			//let misl = TankRocket.Fire(self, (350, 0, 30));
			If(guncycle2)
			{
				If(guncycle)
				{
					
					let misl = BDPMath.FireProjectile("MastermindTracerTank", pos, angle + frandom(-2,2), pitch + frandom(-2,2), 0, 10, 0, 1, 0);
					if(misl) 
					{
						misl.target = base.driver;
						misl.species = base.species;
					}
					
					guncycle = false;
					A_StartSound("CHGNSHOT", CHAN_WEAPON,CHANF_OVERLAP,0.5);
				}
				Else
				{
					
					let misl = BDPMath.FireProjectile("MastermindTracerTank", pos, angle + frandom(-2,2), pitch + frandom(-2,2), 0, 10, 0, 1, 0);
					if(misl) 
					{
						misl.target = base.driver;
						misl.species = base.species;
					}
					
					
					guncycle = true;
					
					A_StartSound("CHGNSHOT", CHAN_WEAPON,CHANF_OVERLAP,0.5);
				}
				guncycle2 = false;
				cam.SetZoom(0.97, 0.5);
				tank.driver.A_AlertMonsters(0, AMF_TARGETEMITTER);
			}
			
			else
			{
				guncycle2 = true;
			}
			
			
			
			//cam.Quake(20,20,0,0.6);
			//pitch -= 5;
			//tank.driver.pitch -= 0.2;
			
			
			cooldown = 3;
		}

	}
	
	States
	{
		Spawn:
			MODL A 1;
		loop;
		Spawn2:
			MODL B 1
			{
				guncycle = TRUE;
				guncycle2 = TRUE;
				gun2 = true;
			}
		KeepSpawned:
			MODL B 1;
		loop;
		
	}
}



class HoverPod : VehPart
{
	/*
	Default
	{
		+Noclip;
	}
	*/
	Float GetPodHeight()
	{
		double tankz = Pos.z;
        double tankheight = tankz - Self.CurSector.FloorPlane.ZatPoint(Pos.xy);
        
        int nfloors = Self.CurSector.Get3DFloorCount();
        
        for(int i = 0; i < nfloors; i++)
        {
            F3DFloor ff = Self.CurSector.Get3DFloor(i);
            if(ff.flags & (F3DFloor.FF_EXISTS | F3DFloor.FF_SOLID) == (F3DFloor.FF_EXISTS | F3DFloor.FF_SOLID))
            {
                double floorz = (ff.flags & F3DFloor.FF_INVERTSECTOR)
                                ? ff.top.ZatPoint(Pos.xy)
                                : ff.bottom.ZatPoint(Pos.xy);
                if(floorz > tankz || (tankz - floorz) > tankheight) continue;
                
                tankheight = tankz - floorz;
            }
        }
		return tankheight;
	}
		
	
		
	States
	{
		Spawn:
			tnt1 A 1;
		loop;
	}
}


class HoverPodFR : HoverPod
{
	override void Tick()
	{
		super.Tick();	
		BDPHoverTank pBase = BDPHoverTank(base);
		if(!pBase) 
        return;	
		pBase.HeightFR = GetPodHeight();
	}
}

class HoverPodFL : HoverPod
{
	override void Tick()
	{
		super.Tick();	
		BDPHoverTank pBase = BDPHoverTank(base);
		if(!pBase) 
        return;	
		pBase.HeightFL = GetPodHeight();
	}
}

class HoverPodBR : HoverPod
{
	override void Tick()
	{
		super.Tick();	
		BDPHoverTank pBase = BDPHoverTank(base);
		if(!pBase) 
        return;	
		pBase.HeightBR = GetPodHeight();
	}
}

class HoverPodBL : HoverPod
{
	override void Tick()
	{
		super.Tick();	
		BDPHoverTank pBase = BDPHoverTank(base);
		if(!pBase) 
        return;	
		pBase.HeightBL = GetPodHeight();
	}
}


class hovertank_buttrocket : VehPart
{
	Default
	{
		Height 4;
		Radius 4;
	}
	States
	{
		Spawn:
			MODL A 1;
		loop;
	}
	bool wasboosting;
	
	override void UpdatePos(bool moving)
	{
		if(!base) return;
		vector3 finalpos = GetOffsetPos(base);
		SetOrigin(finalpos, moving);
		
		A_SetAngle(base.angle, SPF_INTERPOLATE);
		A_SetRoll(base.roll, SPF_INTERPOLATE);
		A_SetPitch(base.pitch, SPF_INTERPOLATE);
		
		
	}
	override void Tick()
	{
		super.Tick();
		
		 BDPHoverTank pBase = BDPHoverTank(base);
    if(!pBase) 
        return;
		If(pBase.boosting)
		{
			bdpmath.fireprojectile("jetpackflametrailsLarge",pos,angle + 180,-pitch,0,20,10);
			wasboosting = true;
			A_startsound("JETLOOP",CHAN_BODY,CHANF_LOOPING);;
		}
		Else if (wasboosting)
		{
			wasboosting = false;
			A_stopsound(CHAN_BODY);
			A_startsound("JETEND",CHAN_BODY);
		}
	}
}


class BDPHoverTank : BDPVehicle
{
	HoverTank_TurretBase turret;
	HoverTank_TurretCannon leftgun;
	HoverTank_TurretCannon rightgun;
	Scorpion_TurretCannon cannon;

	
	int enginetics;
	
	double boostburn;
	bool boost_wait;
	
	float heightFR;
	float heightFL;
	float heightBR;
	float heightBL;
	bool boosting;
	
	int boboffset;


	Default
	{
		Radius 64;
		Height 45;
		Scale 2.0;
		Mass 1600;
		Health 2000;
		BDPVehicle.Armored 4000;
		MaxSlopeSteepness 0.4;
		damagetype "stomp";
		FloatBobStrength 0.125;
		Gravity 0.10;
		+float;
		-vehbase.fallingpitch;
		+vehbase.ALIGNTOPLANE;
		-vehbase.movementpitch;
	}
	
	override void BeginPlay()
	{
		super.BeginPlay();
		VehPart.Attach("Scorpionflames1",self,(random(-64,64),random(-64,64),24));
		VehPart.Attach("Scorpionflames2",self,(random(-64,64),random(-64,64),24));
		VehPart.Attach("HoverPodFR",self,(60,60,0));
		VehPart.Attach("HoverPodFL",self,(-60,60,0));
		VehPart.Attach("HoverPodBR",self,(60,-60,0));
		VehPart.Attach("HoverPodBL",self,(-60,-60,0));
		VehPart.Attach("Hovertank_buttrocket",self,(-65,-45,5));
		VehPart.Attach("Hovertank_buttrocket",self,(-65, 45,5));
		turret = HoverTank_TurretBase(VehPart.Attach("HoverTank_TurretBase", self, (0,0,34)));
		
		leftgun = HoverTank_TurretCannon(VehPart.Attach("HoverTank_TurretCannon", self, (-15,-44,45)));
		rightgun = HoverTank_TurretCannon(VehPart.Attach("HoverTank_TurretCannon", self, (-15,44,45)));
		If(leftgun)
		{
			leftgun.setstatelabel("Spawn2");
		}
		
		boboffset = random(0, 35);
	}
	

	override bool RemoveDriver(PlayerPawn user, vector3 exitpos)
	{	
		bool success = super.RemoveDriver(user, exitpos);
		if(user == driver && success) 
		{
			//A_StartSound("TANK3", flags:CHANF_OVERLAP);
			//A_StopSound(CHAN_7); // Engine Loop
			//bfloatbob = false;
			//Gravity = 0.30;
		}
		return success;
	}

	override void TakeDriver(PlayerPawn user)
	{
		if(health <= 0) return;
		if(user) driver = user;
		let cam = SetupBDPCamera(dist:-260,100,40,200);
		cam.followact = turret;
		cam.source = driver;
		
		ReadyDriver(user);
		SetCrosshair(user, "ScorpRet", (1.0,1.0));
	//	A_StartSound("TNKENGS", flags:CHANF_OVERLAP);
	//	enginetics = 70;
		//bfloatbob = true;
		//Gravity = 0.20;
		//A_StartSound("TANK2", CHAN_7, CHANF_LOOPING);
	}
	
	override vector3 GetDrivePos()
	{
		return (-20,-5,0);
	}
	
	override vector3 GetExitPos(PlayerPawn user)
	{
		if(user == driver) return (0, 0, 64);
		return (-20,-5,0);
	}
	
	override void DoMove(float forwardmove, float sidemove)
	{	
	
		//If(driver)
		//{
			vel.xy *= 0.97;
		//}
		/*
		Else
		{
			//More friction when powered off
			vel.xy *= 0.75;
		}
		*/
		if(abs(boostburn) <= 0.1) boost_wait = false;
	
		if(health <= 0)  
		{
			if(driver) RemoveDriver(driver, GetExitPos(driver));
			Destroy();
			return;
		}
		
		//Hover
		double tankz = Pos.z;
        double tankheight = tankz - Self.CurSector.FloorPlane.ZatPoint(Pos.xy);
        
        int nfloors = Self.CurSector.Get3DFloorCount();
        
        for(int i = 0; i < nfloors; i++)
        {
            F3DFloor ff = Self.CurSector.Get3DFloor(i);
            if(ff.flags & (F3DFloor.FF_EXISTS | F3DFloor.FF_SOLID) == (F3DFloor.FF_EXISTS | F3DFloor.FF_SOLID))
            {
                double floorz = (ff.flags & F3DFloor.FF_INVERTSECTOR)
                                ? ff.top.ZatPoint(Pos.xy)
                                : ff.bottom.ZatPoint(Pos.xy);
                if(floorz > tankz || (tankz - floorz) > tankheight) continue;
                
                tankheight = tankz - floorz;
            }
        }
		
		//Float upwards if any hoverpod isn't far enough off the ground (but not below ground)
		if ((tankheight < 23 || heightFR < 23 && heightFR > -10 || heightFL < 23 && heightFL > -10 || heightBR < 23 && heightBR > -10 || heightBL < 23 && heightBL > -10) && vel.z < 1 && !boboffset)
		{
			vel.z = (vel.z + 0.20);
			//console.printf("%f",vel.z);
		}
		
		
		
		Else if(boboffset)
		{
			boboffset--;
		}
		
		A_StartSound("TANKENG2", CHAN_7, CHANF_LOOPING);
		//Pitch based on movement speed
			double topitch = BDPMath.fmap(vel.length(), 0, 15.0, 0.7, 3.0); 
		
		//Prevent idle warbling
		//topitch = (topitch * 0.80);
		If(topitch < 0.9)
		{
			topitch = 0.9;
		}
		
		
		//console.printf("%f",topitch);
		A_SoundPitch(CHAN_7, topitch);
		
		If(!driver)
		{
			boosting = false;
			return;
		}
		If(driver)
		{
			driver.A_AlertMonsters(2048, AMF_TARGETEMITTER);
		}
		
		// Rotation
		double turnspd = 0.08;
		double accel = 0.30;
		double angdiff = BDPMath.AngleDiff(angle, driver.angle);
		A_SetAngle(BDPMath.Lerp(angle, angle+angdiff, turnspd), SPF_INTERPOLATE);
		
		
		// Boost
		
		if(CheckButtons(BT_ALTATTACK, VehButtons.BTS_DOWN) && !boost_wait)
		{
			/*
			if(boostburn <= 1) 
				A_StartSound("BDP/Wraith/BoostBegin", flags:CHANF_OVERLAP);
			else
				A_StartSound("BDP/Wraith/BoostLoop", CHAN_7, flags:CHANF_LOOPING);
			*/
			boosting = true;
			boostburn++;
			// Boost particles
			/*
			let trail = Spawn("WraithPlasma_Trail", BDPMath.RelativeV3Offset(self, 180,0,0, 150,0,10, 1.));
			if(trail) trail.A_SetScale(0.4);
			*/
			if(boostburn >= 60) 
			{
				boost_wait = true;
				boostburn = 120;
			}
		}
		else if (boostburn)
		{
			boostburn --;
			boosting = false;
			//A_StopSound(CHAN_7);
		}
		
		// Movement
		if(forwardmove || sidemove)
		{
			vector2 movedir = (forwardmove, -sidemove).Unit();
			if(!boosting)
			{
				vel.xy += AngleToVector(angle, accel * movedir.x);
				vel.xy += AngleToVector(angle + 90, (accel * movedir.y));
			}
		} 
		
		
		
		if(boosting)
		{
			vel.xy += AngleToVector(angle, accel * 2.0);
		}
		
	
		
		DoCollisionDamage();
		//console.printf("%f",vel.length());
	}
	

	
	
	States
	{
		Spawn:
			TNK1 B 1;
		loop;
		
		Death:
			TNT1 A 0 A_noblocking();
			TNT1 A 0 A_SpawnItemEX("BigExplosion1112");
			TNT1 A 0 A_Startsound("weapons/explode");
			TNT1 A 0 A_StartSound("EXPLOSIO", 3);
			NULL AAAAAA 0 A_CustomMissile ("MetalShard1", 96, 0, random (0, 360), 2, random (0, 180));
			NULL AAAAAA 0 A_CustomMissile ("MetalShard2", 96, 0, random (0, 360), 2, random (0, 180));
			NULL AAAAAAAAA 0 A_CustomMissile ("GlassShard", 96, 0, random (0, 360), 2, random (0, 360));
			ELEC A 0 A_Explode(100, 250);
			TNT1 A 0 A_SpawnItemEX("DestroyedArmouredVehicle");
			8762 A 5;
			8762 A 100;
			8762 A -1;
			stop;
	}
	
	
}

