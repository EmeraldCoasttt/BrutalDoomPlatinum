class Scorpion_TurretBase : VehPart
{
	Scorpion_TurretCannon cannon;
	Scorpion_TurretGun gun;
	Default
	{
		Radius 32;
		Height 32;
		Scale 1.3;
		+SOLID;
	}
	
	override void OnAttach()
	{
		cannon = Scorpion_TurretCannon( VehPart.Attach("Scorpion_TurretCannon", base,(30,0,12)) );
		gun = Scorpion_TurretGun( VehPart.Attach("Scorpion_TurretGun", base,(0,13,23)) );
		cannon.turretbase = self;
		gun.turretbase = self;
	}
	
	override void UpdatePos(bool moving)
	{
		super.UpdatePos(moving);
		if(!base || !base.driver) return;
		
		A_SetAngle(BDPMath.LerpAngle(angle % 360.0, base.driver.angle % 360.0, 0.15), SPF_INTERPOLATE);
		//A_SetRoll(base.roll, SPF_INTERPOLATE);
		//A_SetPitch(base.pitch, SPF_INTERPOLATE);
	}
	
	States
	{
		Spawn:
			TNK1 B 1;
		loop;
	}
}

class Scorpion_TurretCannon : VehPart
{
	uint cooldown;
	uint cooldown_chaingun;
	VehPart turretbase;
	Default
	{
		Radius 16;
		Height 16;
	}
	
	override void UpdatePos(bool moving)
	{
		if(!turretbase) return;
		vector3 finalpos = GetOffsetPos(turretbase);
		SetOrigin(finalpos, moving);
		
		A_SetAngle(turretbase.angle, SPF_INTERPOLATE);
		A_SetRoll(turretbase.roll, SPF_INTERPOLATE);
		
		double potentialpitch = getangletocamera();
		double aimpitch;
		If(potentialpitch)
		{
			aimpitch = potentialpitch;
		}
		Else
		{
			aimpitch = base.driver ? base.driver.pitch - 6 : 0;
		}
		aimpitch = clamp(aimpitch, -40, 5);
		If(base.driver)
		{
			A_SetPitch(BDPMath.Lerp(pitch, aimpitch, 0.25), SPF_INTERPOLATE);
		}
		else
		{
			A_SetPitch(BDPMath.Lerp(pitch, base.pitch + aimpitch, 0.25), SPF_INTERPOLATE);
		}
		
	}
		
	override void DoUpdate(VehCamera cam)
	{
		let tank = BDPTank(base);
		If(!tank) return;
		
		if(!cam) return;
	
		if(cooldown_chaingun) cooldown_chaingun--;
		if(cooldown) 
		{
			cam.SetZoom(1.0, 0.1);
			cooldown--;
		}
		if(CheckButtons(BT_ATTACK, VehButtons.BTS_PRESSED) && !cooldown)
		{
			//let misl = TankRocket.Fire(self, (350, 0, 30));
			let misl = BDPMath.FireProjectile("TankRocket", pos, angle, pitch, 0, 0, -10, 1, 0);
			if(misl) 
					{
						misl.target = base.driver;
						misl.species = base.species;
					}
			
			A_StartSound("TANKF", CHAN_WEAPON, CHANF_OVERLAP);
			A_StartSound("TANKRE", 2, CHANF_OVERLAP);
			
			double kickback = -0.1 * cos(base.angle-angle);
			tank.AdjustTreads(kickback, kickback);
			cam.SetZoom(0.93, 0.5);
			cam.Quake(20,20,0,0.6);
			pitch -= 10;
			tank.driver.pitch -= 3;
			tank.driver.A_AlertMonsters(0, AMF_TARGETEMITTER);
			cooldown = 40;
		}

	}
	
	States
	{
		Spawn:
			MODL A 1;
		loop;
	}
}

class Scorpion_TurretGun : VehPart
{
	uint cooldown;
	uint cooldown_chaingun;
	VehPart turretbase;
	bool guncycle;
	Default
	{
		Radius 16;
		Height 16;
	}
	
	override void UpdatePos(bool moving)
	{
		if(!turretbase) return;
		vector3 finalpos = GetOffsetPos(turretbase);
		SetOrigin(finalpos, moving);
		
		A_SetAngle(turretbase.angle, SPF_INTERPOLATE);
		A_SetRoll(turretbase.roll, SPF_INTERPOLATE);
		
		double potentialpitch = getangletocamera();
		double aimpitch;
		If(potentialpitch)
		{
			aimpitch = potentialpitch;
		}
		Else
		{
			aimpitch = base.driver ? base.driver.pitch - 6 : 0;
		}
		aimpitch = clamp(aimpitch, -40, 10);
		If(base.driver)
		{
			A_SetPitch(BDPMath.Lerp(pitch, aimpitch, 0.25), SPF_INTERPOLATE);
		}
		else
		{
			A_SetPitch(BDPMath.Lerp(pitch, base.pitch + aimpitch, 0.25), SPF_INTERPOLATE);
		}
		
	}
		
	override void DoUpdate(VehCamera cam)
	{
		let tank = BDPTank(base);
		if(!tank) return;
		if(!cam) return;
	
		if(cooldown_chaingun) cooldown_chaingun--;
		if(cooldown) 
		{
			cam.SetZoom(1.0, 0.1);
			cooldown--;
		}
		
		if(CheckButtons(BT_ALTATTACK, VehButtons.BTS_DOWN) && !cooldown_chaingun)
		{
			double rmax = 1.5;
			double arecoil = frandom(-rmax, rmax);
			double precoil = frandom(-rmax, rmax);
			If(guncycle)
			{
				let proj = BDPMath.FireProjectile("TankMachineGunTracer", pos, angle + arecoil, pitch + precoil, 2, 30, 0, 1, 70);
				guncycle = false;
				// We need to set the target of this projectile if we want hitmarkers to show up
				// for the person who shoots it.
				proj.target = base.driver;
				proj.species = base.species;
			}
			Else
			{
				let proj = BDPMath.FireProjectile("TankMachineGunTracer", pos, angle + arecoil, pitch + precoil, -2, 30, 0, 1, 70);
				guncycle = true;
				// We need to set the target of this projectile if we want hitmarkers to show up
				// for the person who shoots it.
				proj.target = base.driver;
				proj.species = base.species;
			}
			
			
			
			A_StartSound("HMGFIRE", CHAN_WEAPON,CHANF_OVERLAP,0.5);
			cooldown_chaingun = 3;
		}
	}
	
	States
	{
		Spawn:
			MODL A 1;
		loop;
	}
}

class Scorpion_Tread : VehPart
{
	double traction;
	double rotation;
	Property Traction : traction;
	
	Default
	{
		//Radius 50;
		//Height 35;
		//+SOLID;
		
		Scorpion_Tread.Traction 0.5;
	}
	
	override void Tick()
	{
		super.Tick();
	}
	
	override void UpdatePos(bool moving)
	{
		super.UpdatePos(moving);
		if(!base) return;
		
		let tank = BDPTank(base);
		if(!tank) return;
		
		double tfric = ( 1.0-abs(rotation) ) * 0.05;
		rotation *= (tank.friction + tfric);
		rotation = clamp(rotation, -1.0, 1.0);
		
		double topitch = BDPMath.fmap(rotation, -1.0, 1.0, 0.5, 2.0); 
		If (topitch < 1.25)
		{
			topitch = 1.25;
		}
		//console.printf("%f",rotation);
		A_SoundPitch(CHAN_7, topitch);
		
		if(rotation > 0.031) 
		{
			A_StartSound("TANK1", CHAN_7, CHANF_LOOPING);
			tank.treaddirection = 1;
		}
		else if(rotation < -0.031)
		{
			A_StartSound("TANK1", CHAN_7, CHANF_LOOPING);
			tank.treaddirection = 2;
		}
		else
		{
			A_StopSound(CHAN_7);
			tank.treaddirection = 0;
		}
		
		// Apply angular velocity based on rotation.
		int dir = BDPMath.sign(posoffs.y);
		double spdmod = BDPMath.fmap(base.vel.xy.Length(), 0, 15, 1.0, 2.0); 
		double turnvel = (traction * rotation) * 0.5;
		tank.angvel += turnvel * dir * spdmod;
		base.vel.xy += AngleToVector(base.angle, turnvel * 16);
				
		A_SetAngle(base.angle, SPF_INTERPOLATE);
		A_SetRoll(base.roll, SPF_INTERPOLATE);
		
		if(rotation >= 0.2 && tank.driver) 
			tank.driver.A_AlertMonsters(2048, AMF_TARGETEMITTER);
	}
		
	States
	{
		Spawn:
			MODL A 1;
		loop;
	}
}

class Scorpion_TreadFR : Scorpion_Tread {}
class Scorpion_TreadFL : Scorpion_Tread {}
class Scorpion_TreadBL : Scorpion_Tread {}
class Scorpion_TreadBR : Scorpion_Tread {}

class ScorpionFlames1 : VehPart
{

	
	Default
	{

	}
	
	override void Tick()
	{
		super.Tick();
		
		 BDPVehicle pBase = BDPVehicle(base);
    if(!pBase) 
        return;
    
    if(pBase.veharmor <= 2000)
        A_SpawnProjectile("VehicleSmoke", 7, 0, random (0, 360), 2, random (-80, -100));
    
    if(pBase.veharmor <= 1000)
        A_SpawnProjectile("FlameTrailsLongersmaller", 7, 0, random (0, 360), 2, random (-70, -120)); 
	}
	
	
		
	States
	{
		Spawn:
			tnt1 A 1;
		loop;
	}
}

class ScorpionFlames2 : VehPart
{

	
	Default
	{

	}
	
	override void Tick()
	{
		super.Tick();
		
		 BDPVehicle pBase = BDPVehicle(base);
    if(!pBase) 
        return;
    
    if(pBase.veharmor <= 0)
        A_SpawnProjectile("VehicleSmoke", 7, 0, random (0, 360), 2, random (-80, -100));
    
    if(pBase.health <= 1000)
        A_SpawnProjectile("FlameTrailsLongersmaller", 7, 0, random (0, 360), 2, random (-70, -120));
	}
	
	
		
	States
	{
		Spawn:
			TNT1 A 1;
		loop;
	}
}


class BDPTank : BDPVehicle
{
	Scorpion_Tread TreadFL, TreadFR, TreadBL, TreadBR;
	Scorpion_TurretBase turret;
	double angvel;
	double friction;
	double throttle;
	double accel;
	
	int enginetics;
	
	
	Property TreadFriction : friction;
	
	int treaddirection;

	Default
	{
		Radius 64;
		Height 45;
		Scale 2.0;
		Mass 1600;
		Health 2000;
		BDPVehicle.Armored 4000;
		BDPTank.TreadFriction 0.90;
		MaxSlopeSteepness 0.4;
		damagetype "stomp";
		+vehbase.ALIGNTOPLANE;
		-vehbase.fallingpitch;
	}
	
	override void BeginPlay()
	{
		super.BeginPlay();
		
		TreadFL = Scorpion_Tread(VehPart.Attach("Scorpion_TreadFL", self, ( 0, -30,0)));
		TreadFR = Scorpion_Tread(VehPart.Attach("Scorpion_TreadFR", self, (  30, 0,0)));
	//	TreadBL = Scorpion_Tread(VehPart.Attach("Scorpion_TreadBL", self, (-105,-105,0)));
	//	TreadBR = Scorpion_Tread(VehPart.Attach("Scorpion_TreadBR", self, (-105, 105,0)));
		turret = Scorpion_TurretBase(VehPart.Attach("Scorpion_TurretBase", self, (0,0,52)));
		VehPart.Attach("scorpionflames1",self,(random(-64,64),random(-64,64),42));
		VehPart.Attach("scorpionflames2",self,(random(-64,64),random(-64,64),42));
	}
	

	override bool RemoveDriver(PlayerPawn user, vector3 exitpos)
	{	
		bool success = super.RemoveDriver(user, exitpos);
		if(user == driver && success) 
		{
			A_StartSound("TANK3", flags:CHANF_OVERLAP);
			A_StopSound(CHAN_7); // Engine Loop
		}
		return success;
	}

	override void TakeDriver(PlayerPawn user)
	{
		if(health <= 0) return;
		if(user) driver = user;
		let cam = SetupBDPCamera(dist:-260,100,40,200);
		cam.followact = turret;
		cam.source = driver;
		
		ReadyDriver(user);
		SetCrosshair(user, "ScorpRet", (1.0,1.0));
		A_StartSound("TNKENGS", flags:CHANF_OVERLAP);
		enginetics = 70;
		//A_StartSound("TANK2", CHAN_7, CHANF_LOOPING);
	}
	
	override vector3 GetDrivePos()
	{
		return (-20,-5,0);
	}
	
	override vector3 GetExitPos(PlayerPawn user)
	{
		if(user == driver) return (0, 0, 64);
		return (-20,-5,0);
	}
	
	
	void AdjustTreads(double left, double right)
	{
		TreadFL.rotation += left;
		//TreadBL.rotation += left;
		TreadFR.rotation += right;
		//TreadBR.rotation += right;
	}	
	
	override void DoMove(float forwardmove, float sidemove)
	{	
	
		If(driver && enginetics)
		{
			enginetics--;
		}
		Else if (driver)
		{
			A_StartSound("TANK2", CHAN_7, CHANF_LOOPING);
		}
		// Friction
		vel.xy *= 0.75;
		angvel *= 0.75;

		if(health <= 0)  
		{
			if(driver) RemoveDriver(driver, GetExitPos(driver));
			Destroy();
			return;
		}
		if(!driver) return;
		
		double movespd = 0.035;
		double turnspd = 0.150;
		accel = forwardmove;
		if(forwardmove || sidemove)
		{
			vector2 movedir = (forwardmove, sidemove).Unit();
			movedir.x *= movespd;
			movedir.y *= turnspd;
			movedir.y *= BDPMath.sign(movedir.x);
			
			// Forward and Back
			AdjustTreads(movedir.x, movedir.x);
			
			// Left and Right
			int dir = BDPMath.sign(movedir.y);
			double left  = dir < 0 ? 0.5 : 1.0;
			double right = dir > 0 ? 0.5 : 1.0;
			AdjustTreads(movedir.y * left, -movedir.y * right);
		}
		
		A_SetAngle(angle + angvel, SPF_INTERPOLATE);
		DoCollisionDamage();
	}
	
	States
	{
		Spawn:
			TNT1 A 0 A_JumpIf(treaddirection == 1, "moving");
			TNT1 A 0 A_JumpIf(treaddirection == 2, "movingbackwards");
			TNK1 A 1;
		loop;
		
		Moving:
			TNK1 AAABBBCCC 1;
			Goto Spawn;
		MovingBackwards:
			TNK1 CCCBBBAAA 1;
			Goto Spawn;
		
		Death:
			TNT1 A 0 A_noblocking();
			TNT1 A 0 A_SpawnItemEX("BigExplosion1112");
			TNT1 A 0 A_Startsound("weapons/explode");
			TNT1 A 0 A_StartSound("EXPLOSIO", 3);
			NULL AAAAAA 0 A_CustomMissile ("MetalShard1", 96, 0, random (0, 360), 2, random (0, 180));
			NULL AAAAAA 0 A_CustomMissile ("MetalShard2", 96, 0, random (0, 360), 2, random (0, 180));
			NULL AAAAAAAAA 0 A_CustomMissile ("GlassShard", 96, 0, random (0, 360), 2, random (0, 360));
			ELEC A 0 A_Explode(100, 250);
			TNT1 A 0 A_SpawnItemEX("DestroyedArmouredVehicle");
			8762 A 5;
			8762 A 100;
			8762 A -1;
			stop;
	}
	
	
}

