

CLASS ChopperGear : Vehpart
{
	Default
	{
		+Vehpart.aligntobase;
	}

	States
	{
		Spawn:
			MODL A 1;
			LOOP;
		Retracted:
			TNT1 A 1;
			LOOP;
	}

}

CLASS ChopperLauncher : Vehpart
{
	Default
	{
		+Vehpart.aligntobase;
	}
	uint cooldown;
	
	override void DoUpdate(VehCamera cam)
	{
		let chopper = BDPChopper(base);
		if(!chopper) return;
		if(!cam) return;
	
		
		if(cooldown) 
		{
			cam.SetZoom(1.0, 0.1);
			cooldown--;
		}
		if(CheckButtons(BT_ALTATTACK, VehButtons.BTS_DOWN) && !cooldown)
		{
			
					
				A_StartSound("DSRFIRE", CHAN_WEAPON,CHANF_OVERLAP,1.0);
				let misl = BDPMath.FireProjectile("ChopperRocket", pos, angle + frandom(-2,2), pitch + frandom(-2,2));
				if(misl) 
					{
						misl.target = base.driver;
						misl.species = base.species;
						misl.tracer = null;
					}
				cam.SetZoom(0.97, 0.5);
				chopper.driver.A_AlertMonsters(0, AMF_TARGETEMITTER);
			
			
				cooldown = 45;
		}

	}
	
	States
	{
		Spawn:
			TNT1 A 1;
			LOOP;
	}

}

CLASS ChopperGearSmall : ChopperGear
{

	Default
	{
		Scale 0.85;
	
	}
}


class Chopper_TurretCannon : VehPart
{
	uint cooldown;
	uint cooldown_chaingun;
	bool guncycle;
	bool guncycle2;
	bool gun2;
	Default
	{
		Radius 16;
		Height 16;
	}
	
	override void UpdatePos(bool moving)
	{
		if(!base) return;
		vector3 finalpos = GetOffsetPos(base);
		SetOrigin(finalpos, moving);
		
		A_SetAngle(base.angle, SPF_INTERPOLATE);
		A_SetRoll(base.roll, SPF_INTERPOLATE);
		double potentialpitch = getangletocamera();
		double aimpitch;
		If(potentialpitch)
		{
			aimpitch = potentialpitch;
		}
		Else
		{
			aimpitch = base.driver ? base.driver.pitch - 5 : 0;
		}
		aimpitch = clamp(aimpitch, -50, 50);
		If(base.driver)
		{
			A_SetPitch(BDPMath.Lerp(pitch, aimpitch, 0.25), SPF_INTERPOLATE);
		}
		else
		{
			A_SetPitch(BDPMath.Lerp(pitch, base.pitch + aimpitch, 0.25), SPF_INTERPOLATE);
		}
		
	}
		
	override void DoUpdate(VehCamera cam)
	{
		let chopper = BDPChopper(base);
		if(!chopper) return;
		if(!cam) return;
	
		if(cooldown_chaingun) cooldown_chaingun--;
		if(cooldown) 
		{
			//cam.SetZoom(1.0, 0.1);
			cooldown--;
		}
		if(CheckButtons(BT_ATTACK, VehButtons.BTS_DOWN) && !cooldown)
		{
			//let misl = chopperRocket.Fire(self, (350, 0, 30));
			If(guncycle2)
			{
				If(guncycle)
				{
					
					let misl = BDPMath.FireProjectile("MastermindTracertank", pos, angle + frandom(-2,2), pitch + frandom(-2,2), 0, 10, 0, 1, 0);
					if(misl) 
					{
						misl.target = base.driver;
						misl.species = base.species;
					}
					
					guncycle = false;
					A_StartSound("VHCLCHGN", CHAN_WEAPON,CHANF_OVERLAP);
				}
				Else
				{
					
					let misl = BDPMath.FireProjectile("MastermindTracertank", pos, angle + frandom(-2,2), pitch + frandom(-2,2), 0, 10, 0, 1, 0);
					if(misl) 
					{
						misl.target = base.driver;
						misl.species = base.species;
					}
					
					
					guncycle = true;
					
					A_StartSound("VHCLCHGN", CHAN_WEAPON,CHANF_OVERLAP);
				}
				guncycle2 = false;
				//cam.SetZoom(0.97, 0.5);
				chopper.driver.A_AlertMonsters(0, AMF_TARGETEMITTER);
			}
			
			else
			{
				guncycle2 = true;
			}
			
			
			
			//cam.Quake(20,20,0,0.6);
			//pitch -= 5;
			//chopper.driver.pitch -= 0.2;
			
			
			cooldown = 3;
		}

	}
	
	States
	{
		Spawn:
			MODL A 1;
		loop;
		Spawn2:
			MODL B 1
			{
				guncycle = TRUE;
				guncycle2 = TRUE;
				gun2 = true;
			}
		KeepSpawned:
			MODL B 1;
		loop;
		
	}
}


CLASS BDPCHOPPER : BDPVehicle
{

	Default
	{
		Radius 64;
		Height 100;
		Mass 1600;
		Health 800;
		BDPVehicle.Armored 1200;
		MaxSlopeSteepness 0.4;
		damagetype "stomp";
		-vehbase.fallingpitch;
		+vehbase.movementpitch;
	}
	Chopper_TurretCannon leftgun;
	Chopper_TurretCannon rightgun;
	vehpart rightgear;
	vehpart leftgear;
	vehpart frontgear;
	int enginetics;
	
	override void BeginPlay()
	{
		super.BeginPlay();

		VehPart.Attach("ChopperBlades",self,(-17,0,140));
		VehPart.Attach("Chopperlauncher",self,(-55,110,70));
		VehPart.Attach("Chopperlauncher",self,(-55,-110,70));
		VehPart.Attach("Chopperflames1",self,(random(150,-150),random(-50,50),random(40,80)));
		VehPart.Attach("Chopperflames2",self,(random(150,-150),random(-50,50),random(40,80)));
		frontgear = VehPart.Attach("ChopperGearSmall",self,(150,0,0));
		leftgear = VehPart.Attach("ChopperGear",self,(-120,-25,0));
		rightgear = VehPart.Attach("ChopperGear",self,(-120,25,0));
		leftgun = Chopper_TurretCannon(VehPart.Attach("Chopper_TurretCannon", self, (125,-40,45)));
		rightgun = Chopper_TurretCannon(VehPart.Attach("Chopper_TurretCannon", self, (125,40,45)));
		If(leftgun)
		{
			leftgun.setstatelabel("Spawn2");
		}
		
	}
	
	override bool RemoveDriver(PlayerPawn user, vector3 exitpos)
	{	
		bool success = super.RemoveDriver(user, exitpos);
		if(user == driver && success) 
		{
			A_StartSound("HELSTOP", flags:CHANF_OVERLAP,0.50);
			A_StopSound(7); // Engine Loop
			A_StopSound(8); 
			A_StopSound(9); 
			//bfloatbob = false;
			Gravity = 0.30;
		}
		return success;
	}

	override void TakeDriver(PlayerPawn user)
	{
		if(health <= 0) return;
		if(user) driver = user;
		let cam = SetupBDPCamera(dist:-400,300,20,300);
		cam.followact = self;
		cam.source = driver;
		
		ReadyDriver(user);
		SetCrosshair(user, "ScorpRet", (1.0,1.0));
		A_StartSound("HELSTAR", 9, flags:CHANF_OVERLAP,0.75);
		A_StartSound("HELILOP2", 8, CHANF_LOOPING,0.75);
		//enginetics = 184;
		//bfloatbob = true;
		Gravity = 0.0;
		//A_StartSound("chopper2", CHAN_7, CHANF_LOOPING);
	}
	
	override vector3 GetDrivePos()
	{
		return (-20,-5,0);
	}
	
	override vector3 GetExitPos(PlayerPawn user)
	{
		if(user == driver) return (-17, -100, 0);
		return (-20,-5,0);
	}
	
	override void DoMove(float forwardmove, float sidemove)
	{	
		If(!driver || onground)
		{
			If(leftgear && rightgear && frontgear)
			{
				leftgear.setstatelabel("spawn");
				rightgear.setstatelabel("spawn");
				frontgear.setstatelabel("spawn");
			}
		}
		Else If(leftgear && rightgear && frontgear)
		{
			leftgear.setstatelabel("retracted");
			rightgear.setstatelabel("retracted");
			frontgear.setstatelabel("retracted");
		}
		
		
		if (driver)
		{
			A_StartSound("HELILOP", 7, CHANF_LOOPING,0.75);
			
		}
		Else
		{
			A_stopSound(7);
			A_stopSound(8);
		}
		
		vel.xy *= 0.97;
		If(driver)
		{
			vel.z *= 0.97;
		}
	
		if(health <= 0)  
		{
			if(driver) RemoveDriver(driver, GetExitPos(driver));
			Destroy();
			return;
		}
		
		
		
		
		
		
		
	
		
		
		
		
		If(!driver)
		{
			
			return;
		}
		If(driver)
		{
			driver.A_AlertMonsters(2048, AMF_TARGETEMITTER);
		}
		
		// Rotation
		double turnspd = 0.08;
		double accel = 0.30;
		double angdiff = BDPMath.AngleDiff(angle, driver.angle);
		//Don't turn if touching floor
		If(!onground)
		{
			A_SetAngle(BDPMath.Lerp(angle, angle+angdiff, turnspd), SPF_INTERPOLATE);
		}
		
		
		
		
		
		accel = 0.60;
		
		// Movement
		if(!onground && (forwardmove || sidemove))
		{
			vector2 movedir = (forwardmove, -sidemove).Unit();
			
				vel.xy += AngleToVector(angle, accel * movedir.x);
				vel.xy += AngleToVector(angle + 90, (accel * movedir.y));
			
		} 
		
		accel = 0.45;
		
		If(driver && driver.player.cmd.buttons & BT_JUMP)
		{
			vel.z += accel;
		}
		
		Else If(driver && driver.player.cmd.buttons & BT_CROUCH)
		{
			vel.z -= accel;
		}
		
		
		

		
	
		
		DoCollisionDamage();
		//console.printf("%f",vel.length());
		
	
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			MODL A 1;
			LOOP;
		Death:
			TNT1 A 0 A_noblocking();
			TNT1 A 0 A_SpawnItemEX("BigExplosion1112");
			TNT1 A 0 A_Startsound("weapons/explode");
			TNT1 A 0 A_StartSound("EXPLOSIO", 3);
			NULL AAAAAA 0 A_CustomMissile ("MetalShard1", 96, 0, random (0, 360), 2, random (0, 180));
			NULL AAAAAA 0 A_CustomMissile ("MetalShard2", 96, 0, random (0, 360), 2, random (0, 180));
			NULL AAAAAAAAA 0 A_CustomMissile ("GlassShard", 96, 0, random (0, 360), 2, random (0, 360));
			NULL AAAAAAAAA 0 A_spawnprojectile ("GlassShard", 96, 0, random (0, 360), 2, random (0, 360));
		TNT1 AAAAA 0 A_spawnprojectile ("CrashMetalShards", 32, 0, random (0, 360), 2, random (-20, -50));
		TNT1 A 0 A_spawnprojectile ("BikePieces1", 32, 0, random (0, 360), 2, random (-20, -50));
		TNT1 A 0 A_spawnprojectile ("BikePieces2", 32, 0, random (0, 360), 2, random (-20, -50));
		TNT1 A 0 A_spawnprojectile ("BikePieces3", 32, 0, random (0, 360), 2, random (-20, -50));
		TNT1 A 0 A_spawnprojectile ("BikePieces4", 32, 0, random (0, 360), 2, random (-20, -50));
			//TNT1 A 0 A_SpawnItemEX("DestroyedArmouredVehicle");
			8762 A 5;
			8762 A 100;
			8762 A -1;
			stop;
	
	}

}


CLASS ChopperBlades : VehPart
{
	Default
	{
		+Vehpart.aligntobase;
	}

	States
	{
		Spawn:
			MODB A 1
			{
				If(base && base.driver)
				{
					A_setrenderstyle(1.0,Style_Add);
					Return resolvestate("Spin");
				}
				Else
				{
					A_setrenderstyle(1.0,Style_Normal);
					Return resolvestate(null);
				}
			}
			LOOP;
		Spin:
			MODL ABC 1
			{
				If(!base || !base.driver)
				{
					A_setrenderstyle(1.0,Style_Normal);
					Return resolvestate("spindown");
				}
				Else
				{
					A_setrenderstyle(1.0,Style_Add);
					Return resolvestate(null);
				}
			}
			LOOP;
		Spindown:
			MODB ABCDABCDABCDABCDABCDABCDABCDABCDABCDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAAABBBCCCDDDAAABBBCCCDDDAAABBBCCCDDDAAABBBCCCDDD 1
			{
				If(base && base.driver)
				{
					A_setrenderstyle(1.0,Style_Add);
					Return resolvestate("Spin");
				}
				Else
				{
					A_setrenderstyle(1.0,Style_Normal);
					Return resolvestate(null);
				}
			}
			Goto Spawn;
	
	}


}

class ChopperFlames1 : VehPart
{

	
	Default
	{

	}
	
	override void Tick()
	{
		super.Tick();
		
		 BDPVehicle pBase = BDPVehicle(base);
    if(!pBase) 
        return;
    
    if(pBase.veharmor <= 750)
        A_SpawnProjectile("VehicleSmoke", 7, 0, random (0, 360), 2, random (-80, -100));
    
    if(pBase.veharmor <= 375)
        A_SpawnProjectile("FlameTrailsLongersmaller", 7, 0, random (0, 360), 2, random (-70, -120)); 
	}
	
	
		
	States
	{
		Spawn:
			tnt1 A 1;
		loop;
	}
}

class ChopperFlames2 : VehPart
{

	
	Default
	{

	}
	
	override void Tick()
	{
		super.Tick();
		
		 BDPVehicle pBase = BDPVehicle(base);
    if(!pBase) 
        return;
    
    if(pBase.health <= 750)
        A_SpawnProjectile("VehicleSmoke", 7, 0, random (0, 360), 2, random (-80, -100));
    
    if(pBase.health <= 375)
        A_SpawnProjectile("FlameTrailsLongersmaller", 7, 0, random (0, 360), 2, random (-70, -120));
	}
	
	
		
	States
	{
		Spawn:
			TNT1 A 1;
		loop;
	}
}
