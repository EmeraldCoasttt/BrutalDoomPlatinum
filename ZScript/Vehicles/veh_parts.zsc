
// Effectively disables the player's active weapon until they exit
// the vehicle (veh)
class Veh_Manager : Inventory
{
	VehBase veh;
	bool disableweaps;
	State defaultstate;
	string crosshair;
	vector2 crosshair_scale;
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		// Don't allow the player to take damage while in a vehicle.
		// bSHOOTABLE cannot simply be toggled off for the driver,
		// otherwise monsters will ignore them.
		
		if(passive) newdamage = 0;
	}
	
	
	static Veh_Manager Setup(PlayerPawn to, VehBase onveh, bool disableweaps = true)
	{
		to.GiveInventoryType("Veh_Manager");
		let noweap = Veh_Manager(to.FindInventory("Veh_Manager"));
		if(noweap) 
		{
			noweap.veh = onveh;
			let weap = to.player.ReadyWeapon;
			if(weap) noweap.defaultstate = weap.FindState("ReturnFromNothing");
			noweap.disableweaps = disableweaps;
		}
		return noweap;
	}
	
	override void DoEffect()
	{
		let plr = PlayerPawn(Owner);
		if(!veh || !plr) 
		{
			Disable();
		}
		
		super.DoEffect();
	}
	
	void Disable()
	{
		if(!Owner || !Owner.player) return;
		if(disableweaps) Owner.player.SetPSprite(PSP_WEAPON, defaultstate);
		Owner.RemoveInventory(self);
		GoAwayAndDie();
	}
	
	States(Weapon)
	{
		DoNothing:
			TNT1 A 1;
		loop;
	}
}

// Part base
class VehPart : Actor
{
	VehBase base;
	vector3 posoffs;
	vector2 angoffs;
	vector3 anim_posoffs;
	vector2 anim_angoffs;
	double anim_spd;
	uint partflags;
	FlagDef ALIGNTOBASE : partflags, 0;
	
	Default
	{
		+NOINTERACTION;
		+NOGRAVITY;
		+INTERPOLATEANGLES;
		+SLIDESONWALLS;
	}
		
	// Core
	static VehPart Attach(class<VehPart> partname, VehBase to, vector3 offset = (0,0,0), vector2 angles = (0,0))
	{
		vector3 finalpos;
		finalpos = BDPMath.V3Offset(to.angle+angles.x, to.pitch+angles.y, to.roll, offset.x, offset.y, offset.z, 1.);
		finalpos = level.vec3offset(to.pos, finalpos);
		let vpt = VehPart(Spawn(partname, finalpos));
		
		if(vpt)
		{
			vpt.base = to;
			vpt.posoffs = offset;
			vpt.angoffs = angles;
			if(vpt.base) vpt.OnAttach();
		}
		
		return vpt;
	}
		
	virtual vector3 GetOffsetPos(Actor from, vector3 posdiff = (0,0,0))
	{
		vector3 finalpos;
		vector3 animpos = level.vec3Offset(posoffs, anim_posoffs);
		vector3 finaloffs = level.vec3Offset(animpos, posdiff);
		finalpos = BDPMath.V3Offset(from.angle+angoffs.x+anim_angoffs.x, from.pitch+angoffs.y+anim_angoffs.y, from.roll, finaloffs.x, finaloffs.y, finaloffs.z, 1.);
		
		finalpos = level.vec3offset(from.pos, finalpos);
		return finalpos;
	}
	
	virtual void AlignWithTerrain()
	{
		if( base.vehflags & base.bALIGNTOPLANE )
		{
			if(base.onground) 
				BDPMath.AlignToPlane(self);
			else
			{
				pitch = BDPMath.Lerp(pitch, 0, 0.15);
				roll = BDPMath.Lerp(roll, 0, 0.15);
			}
		}
		If(partflags & bALIGNTOBASE)
		{
			angle = base.angle;
			pitch = base.pitch;
			roll = base.roll;
		}
	}
	
	virtual void UpdatePos(bool moving = true)
	{
		if(!base) return;
		vector3 finalpos = GetOffsetPos(base);
		SetOrigin(finalpos, moving);
		AlignWithTerrain();
	}
	
	virtual double GetAngleToCamera()
	{
		if(!base) return 0;
		if(!base.driver) return 0;
		If(!base.viewcam) return 0;
		
		double returnpitch;
		
		FLineTraceData lt;
		base.viewcam.LineTrace(self.angle, 8000, base.driver.pitch, TRF_THRUSPECIES, 0, data:lt);
		/*
		If(lt.hitactor && lt.hitactor != base)
		{
			//console.printf("HIT!!!");
			returnpitch = pitchto(lt.hitactor,0,(lt.hitactor.height * 0.5));
			
		}
		*/
		//else if(!lt.hitactor)
		//{
			Vector3 origin = (pos.xy, pos.z);

			Vector3 diff;
			
			diff = level.Vec3Diff(origin, lt.hitlocation);
			

			returnpitch = -atan2(diff.z, diff.xy.Length());
		//}

		return returnpitch;
	}

	// Readability
	bool CheckButtons(int btns, int bstate, PlayerPawn src = null)
	{
		if(base) return base.CheckButtons(btns, bstate, src);
		return false;
	}
	
	void AnimatePos(double forward, double leftright, double updown)
	{
		anim_posoffs = (forward, leftright, updown);
	}
	void AnimateAngles(double oangle, double opitch)
	{
		anim_angoffs = (oangle, opitch);
	}
	
	// Templates
	virtual void DoUpdate(VehCamera cam) {}
	virtual void OnAttach() {}
	
	override void Tick()
	{
		super.Tick();
		if(!base) 
		{
			Destroy();
			return;
		}
		species = base.species;
		//console.printf(species);
		DoUpdate(base.viewcam);
		if(!anim_spd) anim_spd = 0.97; 
		anim_angoffs *= anim_spd;
		anim_posoffs *= anim_spd;
		UpdatePos();
	}
		
	States
	{
		Spawn:
			TNT1 A 1;
		loop;
	}
	
}

// Wrapper for enums
class VehButtons abstract
{
	enum ButtonStates
	{
		BTS_UP,
		BTS_DOWN,
		BTS_RELEASED,
		BTS_PRESSED
	};
}

class VehBase : Actor
{
	uint vehflags;
	FlagDef ALIGNTOPLANE : vehflags, 0;
	FlagDef FALLINGPITCH : vehflags, 1;
	FlagDef MOVEMENTPITCH : vehflags, 0;
	
	PlayerPawn driver;
	VehCamera viewcam;
	double prevSlope;
	double prevZAccel;
	
	bool onground;

	Default
	{
		+VehBase.ALIGNTOPLANE;
		+SLIDESONWALLS;
		-VehBase.MOVEMENTPITCH;
	}
		
	// Driver Interaction 
	virtual void TakeDriver(PlayerPawn user)
	{
		// Spawn camera and setup Driver
		if(user) driver = user;
		SetupCamera();
		ReadyDriver(user);
	}
	
	virtual void SetCrosshair(Actor src, string crosshair, vector2 scale)
	{
		let vehman = Veh_Manager(src.FindInventory("Veh_Manager"));
		if(vehman)
		{
			vehman.crosshair = crosshair;
			vehman.crosshair_scale = scale;
		}
	}
	
	double GetFloorAngle()
	{
		// Get Floor Normal
		Vector3 floornorm;
		F3DFloor floors;
		for(int i = 0; i < FloorSector.Get3DFloorCount(); i++)
		{
			if(FloorSector.Get3DFloor(i).Top.ZAtPoint(Pos.XY) ~== FloorZ)
			{
				floors = FloorSector.Get3DFloor(i);
				break;
			}
		}
		floornorm = floors ? -floors.Top.Normal : FloorSector.FloorPlane.Normal;
		return atan2(floornorm.XY.Length(), floornorm.Z);
	}
	
	virtual vector3 GetDrivePos()
	{
		return (0,0,0);
	}
	virtual vector3 GetExitPos(PlayerPawn user)
	{
		return (0,0,30);
	}
	
	virtual bool RemoveDriver(PlayerPawn user, vector3 exitpos)
	{	
		// Eject
		vector3 outpos = BDPMath.V3Offset(angle, pitch, roll, exitpos.x, exitpos.y, exitpos.z, 1.);
		outpos = level.vec3offset(pos, outpos);
		bool canexit = user.CheckMove(outpos.xy);
		if(!canexit) 
		{
			if(health <= 0) 
			{
				// Don't prevent exit when vehicle is destroyed.
				outpos = pos;
			}
			else
			{
				
				return false;
			}
		}
		
		user.SetOrigin(outpos, true);
		
		// Remove camera
		let cam = user.player.camera;
		if(cam is "VehCamera") cam.destroy();
		user.player.camera = user;
		
		// Reset flags
		user.bSOLID = user.default.bSOLID;
		user.bNOGRAVITY = user.default.bNOGRAVITY;
		user.bINTERPOLATEANGLES = user.default.bINTERPOLATEANGLES;
		user.roll = 0;
		
		// Remove vehicle manager.
		let vehman = Veh_Manager(user.FindInventory("Veh_Manager"));
		if(vehman) vehman.Disable();
		return true;
	}
	
	virtual void ReadyDriver(PlayerPawn user, bool disableweapons = true)
	{
		Veh_Manager.Setup(user, self, disableweapons);
		user.bSOLID = false;
		user.bNOGRAVITY = true;
		user.bINTERPOLATEANGLES = true;
	}
	
    bool CheckButtons(int btn, int bstate, PlayerPawn src = null)
	{
		if(!src) src = driver;
		if(!src) return 0;
		
		bool btnstatus;
		UserCmd cmd = src.player.cmd;
		uint oldbtns = src.player.oldbuttons;
		switch(bstate)
		{
			case VehButtons.BTS_UP:
				btnstatus = !(cmd.buttons & btn); break;
			case VehButtons.BTS_DOWN:
				btnstatus =  (cmd.buttons & btn); break;
			case VehButtons.BTS_PRESSED:
				btnstatus =  (cmd.buttons & btn) && !(oldbtns & btn); break;
			case VehButtons.BTS_RELEASED:
				btnstatus = !(cmd.buttons & btn) && (oldbtns & btn); break;
		}
		return btnstatus;
	}
	
	// Camera setup
	void AssignCamera(VehCamera cam, PlayerPawn to)
	{
		to.player.camera = cam;
		cam.default_fov = to.player.FOV;
	}
	
	virtual VehCamera SetupCamera(vector3 offset = (0,0,0), vector2 angles = (0,0), class<VehCamera> camtype = "VehCamera", bool setcam = true)
	{
		let cam = VehCamera(VehPart.Attach(camtype, self, offset, angles));
		if(cam && setcam)
		{
			viewcam = VehCamera(cam);
			if(driver) AssignCamera(cam, driver);
		}
		return cam;
	}

	// Update stuff
	void UpdateActorPos(Actor act, vector3 posoffs)
	{
		vector3 finalpos = BDPMath.V3Offset(angle, pitch, roll, posoffs.x, posoffs.y, posoffs.z, 1.);
		finalpos = level.vec3offset(pos, finalpos);
		finalpos = level.vec3offset(finalpos, vel);
		act.SetOrigin(finalpos, true);
		act.roll = roll;
		// act.vel = vel;
		act.vel *= 0;
	}
	
	virtual void UpdatePassengers()
	{
	}
	
	virtual void UpdateDriver()
	{
		UpdateActorPos(driver, GetDrivePos());
		driver.player.vel *= 0;
	}
	
	// Move vehichle
	virtual void DoMove(float forwardmove, float sidemove) {}
	
	// Core
	override bool CanCollideWith(Actor other, bool passive)
	{
		if(other == driver) return false;
		return super.CanCollideWith(other, passive);
	}
	
	virtual bool OnDriveAttempt(PlayerPawn user)
	{
		// Used primarily for setting up passengers.
		If(user is "doomer")
		{
		return true;
		}
		Else
		{
		return false;
		}
	}
	
	virtual void SlopePhys()
	{
		// Some random idea I had, idk.
		// I've tried all the ideas I had, you want it, make a pull request.
		
		/*
		double curZ = pos.z;
		double upDiff = pos.z - prevZAccel;
		prevZAccel = pos.z;
		
		double floorAngle = GetFloorAngle();
		double floorDiff = prevSlope - floorAngle;
		prevSlope = floorAngle;
		
		if(abs(floorDiff) >= 10)
		{
			vel.z += upDiff;
		}
		*/
	}
	
	override bool Used(Actor user)
	{
		let plruser = PlayerPawn(user);
		if(!plruser) return false;
		bool candrive = OnDriveAttempt(plruser);
		
		if(!driver && candrive) 
		{
			TakeDriver(plruser);
			if(!driver) return false;
		}
		else if(driver && user == driver)
		{
			if(RemoveDriver(driver, GetExitPos(driver))) driver = null;
		}
		return false;
	}
	
	override void Tick()
	{
		if(driver)
		{
			UpdateDriver();
			
			UserCmd cmd = driver.player.cmd;
			DoMove(cmd.forwardmove, cmd.sidemove);
		}
		else
		{
			DoMove(0,0);
		}
		
		onground = ((pos.z <= floorz) || bOnMobj || bMBFBouncer);
		if( (vehflags & bALIGNTOPLANE) )
		{
			if(onground || bfloat)
				BDPMath.AlignToPlane(self);
			else 
			{
				pitch = BDPMath.Lerp(pitch, 0, 0.15);
				roll = BDPMath.Lerp(roll, 0, 0.15);
			}
		}
		
		// Do slope physics
		SlopePhys();
		
		if( !onground && (vehflags & bFALLINGPITCH) && vel.z <= -3.0 && pitch < 35)
		{
			double fallrate = BDPMath.fmap(abs(vel.z), 0, 10, 0.1, 2.0);
			A_SetPitch(pitch + fallrate, SPF_INTERPOLATE); 
		}
		
		vector2 truevel = (rotatevector(vel.xy,-angle));
		
		if( !onground && (vehflags & bMOVEMENTPITCH) && pitch < 35 && pitch > -35)
		{
			double fallrate = BDPMath.fmap(abs(truevel.x), 0, 10, 0.1, 2.0);
			If(truevel.x > 0)
			{
				A_SetPitch(pitch + fallrate, SPF_INTERPOLATE); 
			}
			If(truevel.x < 0)
			{
				A_SetPitch(pitch - fallrate, SPF_INTERPOLATE); 
			}
		
		}
		if( !onground && (vehflags & bMOVEMENTPITCH) && roll < 35 && roll > -35)
		{
			double fallrate = BDPMath.fmap(abs(truevel.y), 0, 10, 0.1, 2.0);
			If(truevel.y > 0)
			{
				A_SetRoll(roll - fallrate, SPF_INTERPOLATE); 
			}
			If(truevel.y < 0)
			{
				A_SetRoll(roll + fallrate, SPF_INTERPOLATE); 
			}
		
		}
		
		UpdatePassengers();
		super.Tick();
	}
}

class VehCamera : VehPart 
{
	// Zoom
	double desired_zoom;
	double zoom_interp;
	
	// Quake
	vector3 quake_desiredI;
	double quakeperc;
	double quakefric;
	bool quakedown;

	double default_fov;
	vector3 relposoffs;
	override void UpdatePos(bool moving)
	{
		if(!base) return;
		vector3 finalpos = GetOffsetPos(base, relposoffs);
		SetOrigin(finalpos, moving);
		
		A_SetAngle(base.driver.angle, SPF_INTERPOLATE);
		A_SetPitch(base.driver.pitch, SPF_INTERPOLATE);
	}
	
	void SetZoom(double desired, double interpolation = 1.0)
	{
		desired_zoom = desired;
		zoom_interp = interpolation;
	}
	
	void Quake(double xi, double yi, double zi, double spd)
	{
		quake_desiredI = (xi, yi, zi);
		quakefric = spd;
	}
	
	override void Tick()
	{
		super.Tick();
		
		if(!desired_zoom) desired_zoom = 1.0;
		if(!zoom_interp) zoom_interp = 1.0;
		
		// Do zoom effects.
		if(abs(CameraFOV-desired_zoom) >= 0.001)
		{
			CameraFOV = BDPMath.Lerp(CameraFOV, default_fov / desired_zoom, zoom_interp);
		}
		
		// Do quake effects
		if(quake_desiredI.Length())
		{
			quakeperc = clamp(quakeperc, 0, 1.0);	
			if(!quakedown)
			{
				quakeperc += quakefric;		
				if(quakeperc >= 1.0) quakedown = true;
			}
			else
			{
				quakeperc -= quakefric;
				if(quakeperc <= 0) 
				{
					quake_desiredI *= 0;
					relposoffs *= 0;
					quakedown = false;
					quakeperc = 0;
				}
			}
		
			vector3 q = quake_desiredI * quakeperc;
			vector3 quakeoffs = ( frandom(-q.y, q.y),
								  frandom(-q.x, q.x),
								  frandom(-q.z, q.z) );			
			relposoffs += quakeoffs;
		}
	}
}

class VehLight : Spotlight
{
	Color col;
	vector3 aperture;
	Actor emitter;
	vector3 posoffs;
	vector3 viewoffs;
	double distoffs;
	bool active;

	Default
	{
	  +NOINTERACTION
	  +NOGRAVITY
	}
	
	override void Tick()
	{
		super.Tick();
		if(!emitter)
		{
			Destroy();
			return;
		}
		
		// Update settings.
		args[LIGHT_RED] = col.r;
		args[LIGHT_GREEN] = col.g;
		args[LIGHT_BLUE] = col.b;
		args[LIGHT_INTENSITY] = active ? aperture.x : 0;
		SpotInnerAngle = aperture.y;
		SpotOuterAngle = aperture.z;
		
		// Update position
		vector3 followpos = BDPMath.RelativeV3Offset(emitter, viewoffs.x, viewoffs.y, viewoffs.z, posoffs.x, posoffs.y, posoffs.z, distoffs);
		SetOrigin(followpos, true);
		
		// Update angles
		A_SetAngle(emitter.angle + viewoffs.x, SPF_INTERPOLATE);
		A_SetPitch(emitter.pitch + viewoffs.y, SPF_INTERPOLATE);
		A_SetRoll(emitter.roll + viewoffs.z, SPF_INTERPOLATE);
	}
	
	static VehLight Attach(Actor source, Color col = 0xFFFFFFFF, vector3 intense_in_out = (350, 16, 32), vector3 offset = (0,0,0), double dist = 1.0, vector3 angles = (0,0,0))
	{
		let light = VehLight(Actor.Spawn("VehLight", source.pos));
		if(light)
		{
			light.col = col;
			light.aperture = intense_in_out;
			light.emitter = source;
			light.posoffs = offset;
			light.distoffs = dist;
			light.viewoffs = angles;
			light.active = true;
		}
		return light;
	}
}